import logging
from datetime import datetime, timedelta, time
import pytz
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeChat, Message
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
import os
import re
import csv
import tempfile
from logger import get_logger

from config import *
from database import Database
from handlers.profile import (
    profile, handle_profile_update, handle_full_name, handle_birth_date,
    handle_occupation, handle_instagram, handle_skills, start_profile_callback,
    export_profiles, cancel
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤ —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - [%(filename)s:%(lineno)d] - %(message)s'
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    def create_file_handler(filename, level):
        handler = logging.FileHandler(os.path.join(log_dir, filename), encoding='utf-8')
        handler.setLevel(level)
        handler.setFormatter(formatter)
        return handler
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    root_logger.addHandler(create_file_handler('info.log', logging.INFO))
    root_logger.addHandler(create_file_handler('error.log', logging.ERROR))
    root_logger.addHandler(create_file_handler('debug.log', logging.DEBUG))
    root_logger.addHandler(create_file_handler('warning.log', logging.WARNING))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('httpx').setLevel(logging.WARNING)
    logging.getLogger('httpcore').setLevel(logging.WARNING)
    logging.getLogger('telegram').setLevel(logging.INFO)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    cleanup_old_logs(log_dir)

    logger = get_logger(__name__)
    logger.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")

def cleanup_old_logs(log_dir):
    """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤.
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –±–∞–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏—Ç—Å—è –±–µ—Å—Å—Ä–æ—á–Ω–æ."""
    try:
        current_time = datetime.now()
        for filename in os.listdir(log_dir):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if filename.endswith('.db'):
                continue
                
            if filename.endswith('.log'):
                file_path = os.path.join(log_dir, filename)
                file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                if (current_time - file_time).days > 180:  # 6 –º–µ—Å—è—Ü–µ–≤ = ~180 –¥–Ω–µ–π
                    os.remove(file_path)
                    logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {filename}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
setup_logging()
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
def get_next_sunday():
    try:
        tz = pytz.timezone('Europe/Warsaw')
        today = datetime.now(tz)
        days_until_sunday = (6 - today.weekday()) % 7
        if days_until_sunday == 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
            days_until_sunday = 7
        next_sunday = today + timedelta(days=days_until_sunday)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è: {next_sunday.strftime('%d.%m.%Y')}")
        return next_sunday.strftime("%d.%m.%Y")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è: {e}")
        raise


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ
def format_bath_message(date_str):
    try:
        participants = db.get_bath_participants(date_str)
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ –Ω–∞ {date_str}. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")

        message = f"–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ –í –ë–ê–ù–Æüëá\n\n"
        message += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
        message += f"–î–∞—Ç–∞: –í–û–°–ö–†–ï–°–ï–ù–¨–ï {date_str}\n\n"
        message += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
        message += f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º {MAX_BATH_PARTICIPANTS} —á–µ–ª–æ–≤–µ–∫):\n"

        for i, participant in enumerate(participants, 1):
            paid_status = "‚úÖ" if participant["paid"] else "‚ùå"
            message += f"{i}. {participant['username']} {paid_status}\n"

        if len(participants) == 0:
            message += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è\n"

        message += f"\n–û–ø–ª–∞—Ç–∞:\n"
        message += f"–ö–ê–†–¢–ê\n{CARD_PAYMENT_LINK}\n"
        message += f"Revolut\n{REVOLUT_PAYMENT_LINK}\n\n"
        message += f"–õ–æ–∫–∞—Ü–∏—è: {BATH_LOCATION}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        if len(participants) < MAX_BATH_PARTICIPANTS:
            message += f"–î–ª—è –∑–∞–ø–∏—Å–∏:\n"
            message += f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –Ω–∏–∂–µ\n"
            message += f"2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ\n"
            message += f"3. –û–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
            message += f"4. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        else:
            message += f"\n‚ùóÔ∏è–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞.\n"

        logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ: {message[:100]}...")
        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")
        raise


# –î–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª—É–±–æ–∫–∏—Ö —Å—Å—ã–ª–æ–∫
async def handle_deep_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏
    if not context.args or not context.args[0].startswith("bath_"):
        return

    date_str = context.args[0].replace("bath_", "")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
    bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
    bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
    bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"

    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        text=bath_info,
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"[start] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /start. User: {update.effective_user.id}, Chat: {update.effective_chat.id}, Type: {update.effective_chat.type}")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning(f"[start] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ. User: {update.effective_user.id}, Chat: {update.effective_chat.id}")
            return

        user = update.effective_user
        logger.debug(f"[start] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: id={user.id}, username={user.username}, first_name={user.first_name}, last_name={user.last_name}")
        
        db.add_active_user(user.id, user.username or user.first_name)
        logger.info(f"[start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

        welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å—é –≤ –±–∞–Ω—é."
        if context.args:
            arg = context.args[0]
            logger.debug(f"[start] –ü–æ–ª—É—á–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞: {arg}")
            if arg.startswith("bath_"):
                logger.info(f"[start] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–∏—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–Ω—é")
                await handle_deep_link(update, context)
                return

        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(welcome_message)
            logger.debug(f"[start] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

    except Exception as e:
        logger.error(f"[start] –û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start: {e}", exc_info=True)
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–Ω—é
async def register_bath(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[register_bath] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /register")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[register_bath] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user = update.effective_user
        logger.debug(f"[register_bath] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        if not context.args:
            next_sunday = get_next_sunday()
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text(
                    f"–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ /register DD.MM.YYYY\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä: /register {next_sunday}"
                )
            logger.info("[register_bath] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
            return
        date_str = context.args[0]
        logger.debug(f"[register_bath] –î–∞—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date_str}")
        bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
        bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
        bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
        bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(
                text=bath_info,
                reply_markup=reply_markup
            )
        logger.info(f"[register_bath] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ {date_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ register_bath: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def create_bath_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[create_bath_event] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /create_bath")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[create_bath_event] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[create_bath_event] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        next_sunday = get_next_sunday()
        cleared_events = db.clear_previous_bath_events(except_date_str=next_sunday)
        db.create_bath_event(next_sunday)
        logger.info(f"[create_bath_event] –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ {next_sunday}")
        message_text = format_bath_message(next_sunday)
        participants = db.get_bath_participants(next_sunday)
        if len(participants) < MAX_BATH_PARTICIPANTS:
            keyboard = [
                [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_bath_{next_sunday}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            reply_markup = None
        old_pinned_id = db.get_last_pinned_message_id(BATH_CHAT_ID)
        if old_pinned_id:
            try:
                await context.bot.unpin_chat_message(chat_id=BATH_CHAT_ID, message_id=old_pinned_id)
                db.delete_pinned_message_id(old_pinned_id, BATH_CHAT_ID)
                logger.info(f"[create_bath_event] –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {old_pinned_id}")
            except Exception as e:
                logger.warning(f'[create_bath_event] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')
        sent_message = await context.bot.send_message(
            chat_id=BATH_CHAT_ID,
            text=message_text,
            reply_markup=reply_markup
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        pinned_messages = await context.bot.get_chat(BATH_CHAT_ID)
        if pinned_messages.pinned_message:
            current_message = pinned_messages.pinned_message.text
            current_markup = pinned_messages.pinned_message.reply_markup
            def markup_to_str(markup):
                if not markup:
                    return ''
                return str([[btn.text for btn in row] for row in markup.inline_keyboard])
            markup_changed = markup_to_str(current_markup) != markup_to_str(reply_markup)
            if current_message != message_text or markup_changed:
                try:
                    await context.bot.edit_message_text(
                        chat_id=BATH_CHAT_ID,
                        message_id=pinned_messages.pinned_message.message_id,
                        text=message_text,
                        reply_markup=reply_markup
                    )
                    logger.info(f"[create_bath_event] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logger.error(f"[create_bath_event] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                logger.info(f"[create_bath_event] –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        else:
            await context.bot.pin_chat_message(
                chat_id=BATH_CHAT_ID,
                message_id=sent_message.message_id,
                disable_notification=False
            )
            db.set_pinned_message_id(next_sunday, sent_message.message_id, BATH_CHAT_ID)
            logger.info(f"[create_bath_event] –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {sent_message.message_id}")
        if cleared_events > 0:
            await context.bot.send_message(
                chat_id=BATH_CHAT_ID,
                text=f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é {next_sunday}. –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–∞–Ω–∏ –æ—á–∏—â–µ–Ω."
            )
            logger.info(f"[create_bath_event] –û—á–∏—â–µ–Ω–æ {cleared_events} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await update_pinned_bath_message(context, next_sunday, participants, message_text, reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ create_bath_event: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[button_callback] –ü–æ–ª—É—á–µ–Ω callback: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        db.add_active_user(user.id, user.username or user.first_name)
        logger.debug(f"[button_callback] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback_data
        if query.data.startswith("join_bath_"):
            try:
                date_str = query.data.replace("join_bath_", "")
                logger.info(f"[button_callback] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Ö–æ—á–µ—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é {date_str}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                participants = db.get_bath_participants(date_str)
                logger.debug(f"[button_callback] –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")
                
                if len(participants) >= MAX_BATH_PARTICIPANTS:
                    logger.warning(f"[button_callback] –ë–∞–Ω—è –Ω–∞ {date_str} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞")
                    await query.edit_message_text(
                        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–Ω—è —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
                    )
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if any(p['user_id'] == user.id for p in participants):
                    logger.warning(f"[button_callback] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ {date_str}")
                    await query.edit_message_text(
                        text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –±–∞–Ω—é!"
                    )
                    return

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
                keyboard = [
                    [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é {date_str}?\n\n"
                         f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST}\n"
                         f"–í—Ä–µ–º—è: {BATH_TIME}\n\n"
                         f"–ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
                    reply_markup=reply_markup
                )
                logger.info(f"[button_callback] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
                
            except Exception as e:
                logger.error(f"[button_callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ join_bath: {e}", exc_info=True)
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        elif query.data.startswith("confirm_bath_"):
            try:
                date_str = query.data.replace("confirm_bath_", "")
                logger.info(f"[button_callback] User {user.id} confirmed bath registration for {date_str}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                participants = db.get_bath_participants(date_str)
                if len(participants) >= MAX_BATH_PARTICIPANTS:
                    logger.warning(f"[button_callback] Bath {date_str} is full")
                    await query.edit_message_text(
                        text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã."
                    )
                    return
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                username = user.username or f"{user.first_name} {user.last_name or ''}"
                if 'bath_registrations' not in context.user_data:
                    context.user_data['bath_registrations'] = {}
                context.user_data['bath_registrations'][date_str] = {
                    'user_id': user.id,
                    'username': username,
                    'status': 'confirmed'
                }
                logger.info(f"[button_callback] Saved registration info for user {user.id}")
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
                    keyboard = [
                        [
                            InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω", callback_data=f"pay_bath_{date_str}"),
                            InlineKeyboardButton("üíµ –ë—É–¥—É –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data=f"cash_bath_{date_str}")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        text=f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–∞–Ω—é {date_str}.\n\n"
                             f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                        reply_markup=reply_markup
                    )
                    logger.info(f"[button_callback] Sent payment instructions to user {user.id}")
                    
                except Exception as e:
                    logger.error(f"[button_callback] Error sending payment instructions: {e}", exc_info=True)
                    await query.edit_message_text(
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                
            except Exception as e:
                logger.error(f"[button_callback] Error processing confirm_bath: {e}", exc_info=True)
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        elif query.data.startswith("paid_bath_"):
            try:
                date_str = query.data.replace("paid_bath_", "")
                logger.info(f"[button_callback] User {user.id} marked payment as paid for {date_str}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                if ('bath_registrations' not in context.user_data or
                        date_str not in context.user_data['bath_registrations']):
                    logger.warning(f"[button_callback] No registration found for user {user.id} on {date_str}")
                    await query.edit_message_text(
                        text="–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é."
                    )
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                username = user.username or f"{user.first_name} {user.last_name or ''}"
                context.user_data['bath_registrations'][date_str] = {
                    'user_id': user.id,
                    'username': username,
                    'status': 'pending_confirmation'
                }
                logger.info(f"[button_callback] Updated registration status for user {user.id}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
                db.add_pending_payment(user.id, username, date_str, payment_type='online')
                logger.info(f"[button_callback] Added pending payment for user {user.id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await query.edit_message_text(
                    text=f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                         f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                for admin_id in ADMIN_IDS:
                    try:
                        callback_data_confirm = f"admin_confirm_{user.id}_{date_str}_online"
                        callback_data_decline = f"admin_decline_{user.id}_{date_str}_online"
                        logger.info(f"–§–æ—Ä–º–∏—Ä—É—é callback_data: confirm={callback_data_confirm}, decline={callback_data_decline}")
                        keyboard = [
                            [
                                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª –æ–Ω–ª–∞–π–Ω", callback_data=callback_data_confirm),
                                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=callback_data_decline)
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user.id}) —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –±–∞–Ω—é –Ω–∞ {date_str}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –æ–ø–ª–∞—Ç—É (online)")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                        continue
            except Exception as e:
                logger.error(f"[button_callback] Error processing paid_bath: {e}", exc_info=True)
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        elif query.data.startswith("cash_bath_"):
            try:
                date_str = query.data.replace("cash_bath_", "")
                logger.info(f"[button_callback] User {user.id} chose cash payment for {date_str}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                if ('bath_registrations' not in context.user_data or
                        date_str not in context.user_data['bath_registrations']):
                    logger.warning(f"[button_callback] No registration found for user {user.id} on {date_str}")
                    await query.edit_message_text(
                        text="–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é."
                    )
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                username = user.username or f"{user.first_name} {user.last_name or ''}"
                context.user_data['bath_registrations'][date_str] = {
                    'user_id': user.id,
                    'username': username,
                    'status': 'pending_cash'
                }
                logger.info(f"[button_callback] Updated registration status for user {user.id}")
                
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å cash=True
                    db.add_bath_participant(date_str, user.id, username, paid=False)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ cash –≤—Ä—É—á–Ω—É—é
                    conn = db.get_connection()
                    cursor = conn.cursor()
                    cursor.execute('UPDATE bath_participants SET cash = 1 WHERE date_str = ? AND user_id = ?', (date_str, user.id))
                    conn.commit()
                    conn.close()
                    
                    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
                    db.delete_pending_payment(user.id, date_str)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏
                    db.add_pending_payment(user.id, username, date_str, payment_type='cash')
                    logger.info(f"[button_callback] Added cash payment request for user {user.id}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await query.edit_message_text(
                        text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ.\n\n"
                             f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n"
                             f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    for admin_id in ADMIN_IDS:
                        try:
                            keyboard = [
                                [
                                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{user.id}_{date_str}_cash"),
                                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{user.id}_{date_str}_cash")
                                ]
                            ]
                            reply_markup = InlineKeyboardMarkup(keyboard)
                            
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏:\n"
                                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                                     f"–î–∞—Ç–∞: {date_str}",
                                reply_markup=reply_markup
                            )
                            logger.info(f"[button_callback] Sent notification to admin {admin_id}")
                        except Exception as e:
                            logger.error(f"[button_callback] Error sending notification to admin {admin_id}: {e}", exc_info=True)
                            
                except Exception as e:
                    logger.error(f"[button_callback] Error processing cash payment: {e}", exc_info=True)
                    await query.edit_message_text(
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    
            except Exception as e:
                logger.error(f"[button_callback] Error processing cash_bath: {e}", exc_info=True)
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        elif query.data.startswith("admin_confirm_"):
            try:
                parts = query.data.split("_")
                user_id = int(parts[2])
                date_str = parts[3]
                payment_type = parts[4]
                logger.info(f"[button_callback] Admin {user.id} confirming payment for user {user_id} on {date_str}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if user.id not in ADMIN_IDS:
                    logger.warning(f"[button_callback] Non-admin user {user.id} tried to confirm payment")
                    await query.edit_message_text(
                        text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."
                    )
                    return
                
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
                if db.mark_participant_paid(date_str, user_id):
                    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É –∏–∑ pending_payments
                    db.delete_pending_payment(user_id, date_str)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚úÖ –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω—é {date_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!"
                        )
                        logger.info(f"[button_callback] Sent confirmation to user {user_id}")
                    except Exception as e:
                        logger.error(f"[button_callback] Error sending confirmation to user {user_id}: {e}", exc_info=True)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    await query.edit_message_text(
                        text=f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
                             f"–î–∞—Ç–∞: {date_str}"
                    )
                    logger.info(f"[button_callback] Payment confirmed for user {user_id}")
                else:
                    logger.error(f"[button_callback] Failed to mark payment as paid for user {user_id}")
                    await query.edit_message_text(
                        text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
                    
            except Exception as e:
                logger.error(f"[button_callback] Error processing admin_confirm: {e}", exc_info=True)
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        elif query.data.startswith("admin_decline_"):
            try:
                parts = query.data.split("_")
                user_id = int(parts[2])
                date_str = parts[3]
                payment_type = parts[4]
                logger.info(f"[button_callback] Admin {user.id} declining payment for user {user_id} on {date_str}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                if user.id not in ADMIN_IDS:
                    logger.warning(f"[button_callback] Non-admin user {user.id} tried to decline payment")
                    await query.edit_message_text(
                        text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."
                    )
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_data = db.get_pending_payment(user_id, date_str, payment_type)
                if user_data:
                    username = user_data.get('username')
                    db.delete_pending_payment(user_id, date_str)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω—é {date_str} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. "
                                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                        )
                        logger.info(f"[button_callback] Sent decline notification to user {user_id}")
                    except Exception as e:
                        logger.error(f"[button_callback] Error sending decline notification to user {user_id}: {e}", exc_info=True)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    keyboard = [
                        [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"message_user_{user_id}_{date_str}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(
                        text=f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–∞ {date_str}. "
                             f"–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.",
                        reply_markup=reply_markup
                    )
                    logger.info(f"[button_callback] Payment declined for user {user_id}")
                else:
                    logger.warning(f"[button_callback] No pending payment found for user {user_id}")
                    await query.edit_message_text(
                        text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª."
                    )
                    
            except Exception as e:
                logger.error(f"[button_callback] Error processing admin_decline: {e}", exc_info=True)
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
        else:
            logger.warning(f"[button_callback] Unknown callback data: {query.data}")
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    except Exception as e:
        logger.error(f"[button_callback] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        try:
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as inner_e:
            logger.error(f"[button_callback] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {inner_e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å" –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
async def confirm_bath_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[confirm_bath_registration] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        db.add_active_user(user.id, user.username or user.first_name)
        
        if query.data.startswith("confirm_bath_"):
            date_str = query.data.replace("confirm_bath_", "")
            logger.info(f"[confirm_bath_registration] User {user.id} confirmed registration for {date_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = db.get_bath_participants(date_str)
            if len(participants) >= 6:
                logger.warning(f"[confirm_bath_registration] Bath {date_str} is full")
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç—ã."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            username = user.username or f"{user.first_name} {user.last_name or ''}"
            if 'bath_registrations' not in context.user_data:
                context.user_data['bath_registrations'] = {}
            context.user_data['bath_registrations'][date_str] = {
                'user_id': user.id,
                'username': username,
                'status': 'confirmed'
            }
            logger.info(f"[confirm_bath_registration] Saved registration info for user {user.id}")
            
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ
                keyboard = [
                    [
                        InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω", callback_data=f"pay_bath_{date_str}"),
                        InlineKeyboardButton("üíµ –ë—É–¥—É –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data=f"cash_bath_{date_str}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    text=f"–û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –±–∞–Ω—é {date_str}.\n\n"
                         f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
                    reply_markup=reply_markup
                )
                logger.info(f"[confirm_bath_registration] Sent payment instructions to user {user.id}")
                
            except Exception as e:
                logger.error(f"[confirm_bath_registration] Error sending payment instructions: {e}", exc_info=True)
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –æ–ø–ª–∞—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
    except Exception as e:
        logger.error(f"[confirm_bath_registration] Unexpected error: {e}", exc_info=True)
        try:
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as inner_e:
            logger.error(f"[confirm_bath_registration] Error sending error message: {inner_e}", exc_info=True)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"
async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[handle_payment_confirmation] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        db.add_active_user(user.id, user.username or user.first_name)
        callback_data = query.data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É: {callback_data}")

        if callback_data.startswith("paid_bath_"):
            date_str = callback_data.replace("paid_bath_", "")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if ('bath_registrations' in context.user_data and
                    date_str in context.user_data['bath_registrations']):

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                context.user_data['bath_registrations'][date_str]['status'] = 'payment_claimed'
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ {date_str}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = user.username or f"{user.first_name} {user.last_name or ''}"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                user_data = {
                    'user_id': user.id,
                    'username': username,
                    'date_str': date_str
                }
                logger.info(f"–î–æ–±–∞–≤–ª—è—é –∑–∞—è–≤–∫—É: user_id={user.id}, username={username}, date_str={date_str}, payment_type=online")
                db.add_pending_payment(user.id, username, date_str, payment_type='online')
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await query.edit_message_text(
                    text=f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                         f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞–Ω–∏ –Ω–∞ {date_str}.\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                for admin_id in ADMIN_IDS:
                    try:
                        callback_data_confirm = f"admin_confirm_{user.id}_{date_str}_online"
                        callback_data_decline = f"admin_decline_{user.id}_{date_str}_online"
                        logger.info(f"–§–æ—Ä–º–∏—Ä—É—é callback_data: confirm={callback_data_confirm}, decline={callback_data_decline}")
                        keyboard = [
                            [
                                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª –æ–Ω–ª–∞–π–Ω", callback_data=callback_data_confirm),
                                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=callback_data_decline)
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user.id}) —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –±–∞–Ω—é –Ω–∞ {date_str}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –æ–ø–ª–∞—Ç—É (online)")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                        continue
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ."
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_payment_confirmation: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def admin_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, date_str, payment_type):
    query = update.callback_query
    await query.answer()

    admin_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in ADMIN_IDS:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return

    callback_data = query.data
    parts = callback_data.split("_")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ len(parts), –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    if parts[0] == "admin" and parts[1] == "confirm":
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º user_id, date_str, payment_type
        user_id = int(parts[2])
        date_str = parts[3]
        payment_type = parts[4] if len(parts) > 4 else None

        user_data = db.get_pending_payment(user_id, date_str, payment_type)
        logger.info(f"[admin_confirm_payment] –ò—â—É –∑–∞—è–≤–∫—É: user_id={user_id}, date_str={date_str}, payment_type={payment_type}")
        logger.info(f"[admin_confirm_payment] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {user_data}")
        if user_data:
            profile = db.get_user_profile(user_id)
            if not profile:
                await query.edit_message_text(
                    text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –∞ –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É."
                )
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="–î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="start_profile")]
                        ])
                    )
                except Exception as e:
                    logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                return

            username = user_data.get('username')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
            participants = db.get_bath_participants(date_str)
            user_in_participants = any(p['user_id'] == user_id for p in participants)
            if not user_in_participants:
                db.add_bath_participant(date_str, user_id, username, paid=False)
                # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏, –æ–±–Ω–æ–≤–ª—è–µ–º cash
                if payment_type == 'cash':
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute('UPDATE bath_participants SET cash = 1 WHERE date_str = ? AND user_id = ?', (date_str, user_id))
                        conn.commit()
                    finally:
                        conn.close()
            # –¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–µ–º –æ–ø–ª–∞—Ç—É
            db.mark_participant_paid(date_str, user_id)
            db.delete_pending_payment(user_id, date_str)
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω—é {date_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
                logger.info(f"[admin_confirm_payment] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            try:
                await query.edit_message_text(
                    text=f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–∞ {date_str}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
                logger.info(f"[admin_confirm_payment] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
            # --- –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É ---
            try:
                logger.info(f"[admin_confirm_payment] –û–±–Ω–æ–≤–ª—è—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É {BATH_CHAT_ID} –¥–ª—è –¥–∞—Ç—ã {date_str}")
                participants = db.get_bath_participants(date_str)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                participants_list = f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞–Ω–∏ –Ω–∞ {date_str}:\n\n"
                for i, participant in enumerate(participants, 1):
                    paid_status = "‚úÖ" if participant.get("paid") else "‚ùå"
                    cash_status = "üíµ" if participant.get("cash") else ""
                    participants_list += f"{i}. {participant['username']} {paid_status}{cash_status}\n"
                if len(participants) == 0:
                    participants_list += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è\n"
                await context.bot.send_message(
                    chat_id=BATH_CHAT_ID,
                    text=f"@{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è(–∞—Å—å) –Ω–∞ –±–∞–Ω—é {date_str} ‚úÖ\n\n{participants_list}"
                )
                # --- –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ---
                message = format_bath_message(date_str)
                pinned_messages = await context.bot.get_chat(BATH_CHAT_ID)
                logger.info(f"[admin_confirm_payment] –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π message_id –≤ —á–∞—Ç–µ: {pinned_messages.pinned_message.message_id if pinned_messages.pinned_message else 'None'}")
                # –§–æ—Ä–º–∏—Ä—É–µ–º reply_markup –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if len(participants) < MAX_BATH_PARTICIPANTS:
                    keyboard = [
                        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_bath_{date_str}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                else:
                    reply_markup = None
                current_message = pinned_messages.pinned_message.text if pinned_messages.pinned_message else None
                current_markup = pinned_messages.pinned_message.reply_markup if pinned_messages.pinned_message else None
                logger.info(f"[admin_confirm_payment] –ü—ã—Ç–∞—é—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={pinned_messages.pinned_message.message_id if pinned_messages.pinned_message else 'None'}")
                logger.info(f"[admin_confirm_payment] –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {current_message}")
                logger.info(f"[admin_confirm_payment] –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {message}")
                logger.info(f"[admin_confirm_payment] –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {current_markup}")
                logger.info(f"[admin_confirm_payment] –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏: {reply_markup}")
                def markup_to_str(markup):
                    if not markup:
                        return ''
                    return str([[btn.text for btn in row] for row in markup.inline_keyboard])
                markup_changed = markup_to_str(current_markup) != markup_to_str(reply_markup)
                # –ï—Å–ª–∏ message_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                expected_message = message
                if not pinned_messages.pinned_message or current_message != expected_message:
                    logger.info(f"[admin_confirm_payment] –û—Ç–∫—Ä–µ–ø–ª—è—é —Å—Ç–∞—Ä–æ–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è—é –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                    try:
                        await context.bot.unpin_all_chat_messages(BATH_CHAT_ID)
                    except Exception as e:
                        logger.warning(f"[admin_confirm_payment] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ
                    sent_message = await context.bot.send_message(
                        chat_id=BATH_CHAT_ID,
                        text=message,
                        reply_markup=reply_markup
                    )
                    await context.bot.pin_chat_message(
                        chat_id=BATH_CHAT_ID,
                        message_id=sent_message.message_id,
                        disable_notification=False
                    )
                    logger.info(f"[admin_confirm_payment] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {sent_message.message_id}")
                elif current_message != message or markup_changed:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=BATH_CHAT_ID,
                            message_id=pinned_messages.pinned_message.message_id,
                            text=message,
                            reply_markup=reply_markup
                        )
                        logger.info(f"[admin_confirm_payment] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
                    except Exception as e:
                        logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                else:
                    logger.info(f"[admin_confirm_payment] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
                logger.info(f"[admin_confirm_payment] –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
            except Exception as e:
                logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
        else:
            try:
                await query.edit_message_text(
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª."
                )
                logger.info(f"[admin_confirm_payment] –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id}, date_str={date_str}, payment_type={payment_type}")
            except Exception as e:
                logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def admin_decline_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, date_str, payment_type):
    query = update.callback_query
    await query.answer()

    admin_id = update.effective_user.id

    if admin_id not in ADMIN_IDS:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return

    callback_data = query.data
    parts = callback_data.split("_")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ len(parts), –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    if parts[0] == "admin" and parts[1] == "decline":
        user_id = int(parts[2])
        date_str = parts[3]
        payment_type = parts[4] if len(parts) > 4 else None

async def handle_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            logger.warning("[handle_skills] No message or text received")
            return ConversationHandler.END
            
        user = update.message.from_user
        skills = update.message.text
        logger.info(f"[handle_skills] User {user.id} entered skills: {skills}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–≤—ã–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['skills'] = skills
        logger.info(f"[handle_skills] Saved skills for user {user.id}")
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            profile_data = {
                'user_id': user.id,
                'username': user.username or f"{user.first_name} {user.last_name or ''}",
                'full_name': f"{user.first_name} {user.last_name or ''}",
                'birth_date': context.user_data.get('birth_date'),
                'occupation': context.user_data.get('occupation'),
                'instagram': context.user_data.get('instagram'),
                'skills': skills
            }
            
            db.save_user_profile(profile_data)
            logger.info(f"[handle_skills] Saved user profile for user {user.id}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /profile"
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç
            try:
                pending_payments = db.get_pending_payments(user.id)
                if pending_payments:
                    logger.info(f"[handle_skills] Found {len(pending_payments)} pending payments for user {user.id}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    for admin_id in ADMIN_IDS:
                        try:
                            profile_info = (
                                f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                                f"–ò–º—è: {profile_data['full_name']}\n"
                                f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {profile_data['birth_date']}\n"
                                f"–ü—Ä–æ—Ñ–µ—Å—Å–∏—è: {profile_data['occupation']}\n"
                                f"Instagram: {profile_data['instagram']}\n"
                                f"–ù–∞–≤—ã–∫–∏: {profile_data['skills']}\n\n"
                                f"–û–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã:"
                            )
                            
                            for payment in pending_payments:
                                profile_info += f"\n- {payment['date_str']} ({payment['payment_type']})"
                                
                            keyboard = [
                                [
                                    InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{user.id}_{payment['date_str']}_{payment['payment_type']}"),
                                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{user.id}_{payment['date_str']}_{payment['payment_type']}")
                                ]
                                for payment in pending_payments
                            ]
                            reply_markup = InlineKeyboardMarkup(keyboard)
                            
                            await context.bot.send_message(
                                chat_id=admin_id,
                                text=profile_info,
                                reply_markup=reply_markup
                            )
                            logger.info(f"[handle_skills] Sent profile info to admin {admin_id}")
                        except Exception as e:
                            logger.error(f"[handle_skills] Error sending profile info to admin {admin_id}: {e}", exc_info=True)
                            
            except Exception as e:
                logger.error(f"[handle_skills] Error checking pending payments: {e}", exc_info=True)
                
        except Exception as e:
            logger.error(f"[handle_skills] Error saving profile: {e}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    except Exception as e:
        logger.error(f"[handle_skills] Unexpected error: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as inner_e:
            logger.error(f"[handle_skills] Error sending error message: {inner_e}", exc_info=True)
            
    return ConversationHandler.END

async def handle_cash_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[handle_cash_payment] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
        db.add_active_user(user.id, user.username or user.first_name)
        
        if query.data.startswith("cash_bath_"):
            date_str = query.data.replace("cash_bath_", "")
            logger.info(f"[handle_cash_payment] User {user.id} chose cash payment for {date_str}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if ('bath_registrations' not in context.user_data or
                    date_str not in context.user_data['bath_registrations']):
                logger.warning(f"[handle_cash_payment] No registration found for user {user.id} on {date_str}")
                await query.edit_message_text(
                    text="–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é."
                )
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            username = user.username or f"{user.first_name} {user.last_name or ''}"
            context.user_data['bath_registrations'][date_str] = {
                'user_id': user.id,
                'username': username,
                'status': 'pending_cash'
            }
            logger.info(f"[handle_cash_payment] Updated registration status for user {user.id}")
            
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å cash=True
                db.add_bath_participant(date_str, user.id, username, paid=False)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ cash –≤—Ä—É—á–Ω—É—é
                conn = db.get_connection()
                cursor = conn.cursor()
                cursor.execute('UPDATE bath_participants SET cash = 1 WHERE date_str = ? AND user_id = ?', (date_str, user.id))
                conn.commit()
                conn.close()
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
                db.delete_pending_payment(user.id, date_str)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏
                db.add_pending_payment(user.id, username, date_str, payment_type='cash')
                logger.info(f"[handle_cash_payment] Added cash payment request for user {user.id}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await query.edit_message_text(
                    text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –≤—Ö–æ–¥–µ.\n\n"
                         f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.\n"
                         f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                for admin_id in ADMIN_IDS:
                    try:
                        keyboard = [
                            [
                                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_confirm_{user.id}_{date_str}_cash"),
                                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{user.id}_{date_str}_cash")
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏:\n"
                                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
                                 f"–î–∞—Ç–∞: {date_str}",
                            reply_markup=reply_markup
                        )
                        logger.info(f"[handle_cash_payment] Sent notification to admin {admin_id}")
                    except Exception as e:
                        logger.error(f"[handle_cash_payment] Error sending notification to admin {admin_id}: {e}", exc_info=True)
                            
            except Exception as e:
                logger.error(f"[handle_cash_payment] Error processing cash payment: {e}", exc_info=True)
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                
    except Exception as e:
        logger.error(f"[handle_cash_payment] Unexpected error: {e}", exc_info=True)
        try:
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as inner_e:
            logger.error(f"[handle_cash_payment] Error sending error message: {inner_e}", exc_info=True)

if __name__ == "__main__":
    from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ConversationHandler
    
    application = Application.builder().token(BOT_TOKEN).build()

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("register", register_bath))
    application.add_handler(CommandHandler("create_bath", create_bath_event))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(CallbackQueryHandler(confirm_bath_registration, pattern="^confirm_bath_"))
    application.add_handler(CallbackQueryHandler(handle_payment_confirmation, pattern="^paid_bath_"))
    application.add_handler(CallbackQueryHandler(handle_cash_payment, pattern="^cash_bath_"))
    application.add_handler(CallbackQueryHandler(admin_confirm_payment, pattern="^admin_confirm_"))
    application.add_handler(CallbackQueryHandler(admin_decline_payment, pattern="^admin_decline_"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª—É–±–æ–∫–∏—Ö —Å—Å—ã–ª–æ–∫
    application.add_handler(CommandHandler("start", handle_deep_link, filters=filters.Regex("^bath_")))

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    application.run_polling()
