import logging
from datetime import datetime, timedelta, time
import pytz
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand, BotCommandScopeChat, Message
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from logging.handlers import RotatingFileHandler, TimedRotatingFileHandler
import os
import re
import csv
import tempfile

from config import *
from database import Database
from handlers.profile import (
    profile, handle_profile_update, handle_full_name, handle_birth_date,
    handle_occupation, handle_instagram, handle_skills, start_profile_callback,
    export_profiles, cancel
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = "logs"
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤
    log_format = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü)
    def create_file_handler(filename, level):
        log_file = os.path.join(log_dir, filename)
        handler = TimedRotatingFileHandler(
            log_file,
            when='midnight',
            interval=30,  # —Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 –¥–Ω–µ–π
            backupCount=6,  # —Ö—Ä–∞–Ω–∏—Ç—å 6 –º–µ—Å—è—Ü–µ–≤ –ª–æ–≥–æ–≤
            encoding='utf-8'
        )
        handler.setFormatter(log_format)
        handler.setLevel(level)
        return handler
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    error_handler = create_file_handler('error.log', logging.ERROR)
    warning_handler = create_file_handler('warning.log', logging.WARNING)
    info_handler = create_file_handler('info.log', logging.INFO)
    debug_handler = create_file_handler('debug.log', logging.DEBUG)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(log_format)
    console_handler.setLevel(logging.INFO)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.DEBUG)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∞–º—ã–π –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    root_logger.addHandler(error_handler)
    root_logger.addHandler(warning_handler)
    root_logger.addHandler(info_handler)
    root_logger.addHandler(debug_handler)
    root_logger.addHandler(console_handler)
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –±–æ—Ç–∞
    logger = logging.getLogger(__name__)
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    cleanup_old_logs(log_dir)
    
    return logger

def cleanup_old_logs(log_dir):
    """–û—á–∏—â–∞–µ—Ç –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤.
    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –±–∞–Ω–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏—Ç—Å—è –±–µ—Å—Å—Ä–æ—á–Ω–æ."""
    try:
        current_time = datetime.now()
        for filename in os.listdir(log_dir):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if filename.endswith('.db'):
                continue
                
            if filename.endswith('.log'):
                file_path = os.path.join(log_dir, filename)
                file_time = datetime.fromtimestamp(os.path.getctime(file_path))
                if (current_time - file_time).days > 180:  # 6 –º–µ—Å—è—Ü–µ–≤ = ~180 –¥–Ω–µ–π
                    os.remove(file_path)
                    logging.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: {filename}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤: {e}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è
def get_next_sunday():
    try:
        tz = pytz.timezone('Europe/Warsaw')
        today = datetime.now(tz)
        days_until_sunday = (6 - today.weekday()) % 7
        if days_until_sunday == 0:  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–µ–µ
            days_until_sunday = 7
        next_sunday = today + timedelta(days=days_until_sunday)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è: {next_sunday.strftime('%d.%m.%Y')}")
        return next_sunday.strftime("%d.%m.%Y")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è: {e}")
        raise


# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ
def format_bath_message(date_str):
    try:
        participants = db.get_bath_participants(date_str)
        logger.info(f"–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ –Ω–∞ {date_str}. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}")

        message = f"–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ –í –ë–ê–ù–Æüëá\n\n"
        message += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
        message += f"–î–∞—Ç–∞: –í–û–°–ö–†–ï–°–ï–ù–¨–ï {date_str}\n\n"
        message += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
        message += f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–º–∞–∫—Å–∏–º—É–º {MAX_BATH_PARTICIPANTS} —á–µ–ª–æ–≤–µ–∫):\n"

        for i, participant in enumerate(participants, 1):
            paid_status = "‚úÖ" if participant["paid"] else "‚ùå"
            message += f"{i}. {participant['username']} {paid_status}\n"

        if len(participants) == 0:
            message += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è\n"

        message += f"\n–û–ø–ª–∞—Ç–∞:\n"
        message += f"–ö–ê–†–¢–ê\n{CARD_PAYMENT_LINK}\n"
        message += f"Revolut\n{REVOLUT_PAYMENT_LINK}\n\n"
        message += f"–õ–æ–∫–∞—Ü–∏—è: {BATH_LOCATION}\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
        if len(participants) < MAX_BATH_PARTICIPANTS:
            message += f"–î–ª—è –∑–∞–ø–∏—Å–∏:\n"
            message += f"1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –Ω–∏–∂–µ\n"
            message += f"2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –±–æ—Ç–∞ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ\n"
            message += f"3. –û–ø–ª–∞—Ç–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
            message += f"4. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        else:
            message += f"\n‚ùóÔ∏è–õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ó–∞–ø–∏—Å—å –∑–∞–∫—Ä—ã—Ç–∞.\n"

        logger.debug(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–Ω–µ: {message[:100]}...")
        return message
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")
        raise


# –î–æ–±–∞–≤–∏–º —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–ª—É–±–æ–∫–∏—Ö —Å—Å—ã–ª–æ–∫
async def handle_deep_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ –≥–ª—É–±–æ–∫–æ–π —Å—Å—ã–ª–∫–∏
    if not context.args or not context.args[0].startswith("bath_"):
        return

    date_str = context.args[0].replace("bath_", "")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
    bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
    bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
    bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"

    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        text=bath_info,
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[start] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /start")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[start] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user = update.effective_user
        db.add_active_user(user.id, user.username or user.first_name)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        welcome_message = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏ –∑–∞–ø–∏—Å—å—é –≤ –±–∞–Ω—é."
        if context.args:
            arg = context.args[0]
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∑–∞–ø—É—Å–∫–∞: {arg}")
            if arg.startswith("bath_"):
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—Ä–∏—à–µ–ª –ø–æ —Å—Å—ã–ª–∫–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–Ω—é")
                await handle_deep_link(update, context)
                return
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(welcome_message)
        logger.debug(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–Ω—é
async def register_bath(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[register_bath] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /register")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[register_bath] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user = update.effective_user
        logger.debug(f"[register_bath] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        if not context.args:
            next_sunday = get_next_sunday()
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text(
                    f"–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ /register DD.MM.YYYY\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä: /register {next_sunday}"
                )
            logger.info("[register_bath] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
            return
        date_str = context.args[0]
        logger.debug(f"[register_bath] –î–∞—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date_str}")
        bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
        bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
        bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
        bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(
                text=bath_info,
                reply_markup=reply_markup
            )
        logger.info(f"[register_bath] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ {date_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ register_bath: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def create_bath_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[create_bath_event] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /create_bath")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[create_bath_event] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[create_bath_event] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        next_sunday = get_next_sunday()
        cleared_events = db.clear_previous_bath_events(except_date_str=next_sunday)
        db.create_bath_event(next_sunday)
        logger.info(f"[create_bath_event] –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ –Ω–∞ {next_sunday}")
        message_text = format_bath_message(next_sunday)
        participants = db.get_bath_participants(next_sunday)
        if len(participants) < MAX_BATH_PARTICIPANTS:
            keyboard = [
                [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_bath_{next_sunday}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
        else:
            reply_markup = None
        old_pinned_id = db.get_last_pinned_message_id(BATH_CHAT_ID)
        if old_pinned_id:
            try:
                await context.bot.unpin_chat_message(chat_id=BATH_CHAT_ID, message_id=old_pinned_id)
                db.delete_pinned_message_id(old_pinned_id, BATH_CHAT_ID)
                logger.info(f"[create_bath_event] –û—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {old_pinned_id}")
            except Exception as e:
                logger.warning(f'[create_bath_event] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')
        sent_message = await context.bot.send_message(
            chat_id=BATH_CHAT_ID,
            text=message_text,
            reply_markup=reply_markup
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        pinned_messages = await context.bot.get_chat(BATH_CHAT_ID)
        if pinned_messages.pinned_message:
            current_message = pinned_messages.pinned_message.text
            current_markup = pinned_messages.pinned_message.reply_markup
            def markup_to_str(markup):
                if not markup:
                    return ''
                return str([[btn.text for btn in row] for row in markup.inline_keyboard])
            markup_changed = markup_to_str(current_markup) != markup_to_str(reply_markup)
            if current_message != message_text or markup_changed:
                try:
                    await context.bot.edit_message_text(
                        chat_id=BATH_CHAT_ID,
                        message_id=pinned_messages.pinned_message.message_id,
                        text=message_text,
                        reply_markup=reply_markup
                    )
                    logger.info(f"[create_bath_event] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                except Exception as e:
                    logger.error(f"[create_bath_event] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                logger.info(f"[create_bath_event] –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        else:
            await context.bot.pin_chat_message(
                chat_id=BATH_CHAT_ID,
                message_id=sent_message.message_id,
                disable_notification=False
            )
            db.set_pinned_message_id(next_sunday, sent_message.message_id, BATH_CHAT_ID)
            logger.info(f"[create_bath_event] –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {sent_message.message_id}")
        if cleared_events > 0:
            await context.bot.send_message(
                chat_id=BATH_CHAT_ID,
                text=f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é {next_sunday}. –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–∞–Ω–∏ –æ—á–∏—â–µ–Ω."
            )
            logger.info(f"[create_bath_event] –û—á–∏—â–µ–Ω–æ {cleared_events} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π")
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await update_pinned_bath_message(context, next_sunday, participants, message_text, reply_markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ create_bath_event: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è"
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[button_callback] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        db.add_active_user(user.id, user.username or user.first_name)
        callback_data = query.data
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {callback_data}")

        if callback_data.startswith("join_bath_"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ join_bath_")
            date_str = callback_data.replace("join_bath_", "")
            logger.info(f"[button_callback] join_bath_ –¥–ª—è –¥–∞—Ç—ã {date_str}")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é {date_str}")

            # –ê—Ç–æ–º–∞—Ä–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ (–≤–∞–ª–∏–¥–Ω–æ 2 —á–∞—Å–∞)
            if not db.try_add_bath_invite(user.id, date_str, hours=2):
                await query.answer("–í–∞–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —ç—Ç—É –¥–∞—Ç—É (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
            if 'bath_registrations' in context.user_data and date_str in context.user_data['bath_registrations']:
                await query.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.", show_alert=True)
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = db.get_bath_participants(date_str)
            if len(participants) >= MAX_BATH_PARTICIPANTS:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                await query.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–Ω—è —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", show_alert=True)
                return

            try:
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç
                bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
                bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
                bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
                bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"

                keyboard = [
                    [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=user.id,
                    text=bath_info,
                    reply_markup=reply_markup
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

                # –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤ –≥—Ä—É–ø–ø–µ
                await query.message.reply_text(
                    f"@{user.username or user.first_name}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.",
                    reply_to_message_id=query.message.message_id
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")

                # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞
                bot_username = context.bot.username
                start_link = f"https://t.me/{bot_username}?start=bath_{date_str}"

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await query.answer("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º", show_alert=True)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
                username = user.username or user.first_name
                await query.message.reply_text(
                    f"@{username}, –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–∞–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.\n\n"
                    f"1. [–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º]({start_link})\n"
                    f"2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start\n"
                    f"3. –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register {date_str}\n\n"
                    f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏.",
                    parse_mode="Markdown",
                    disable_web_page_preview=True,
                    reply_to_message_id=query.message.message_id
                )
        elif callback_data.startswith("confirm_bath_"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ confirm_bath_")
            date_str = callback_data.replace("confirm_bath_", "")
            logger.info(f"[button_callback] confirm_bath_ –¥–ª—è –¥–∞—Ç—ã {date_str}")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å confirm_bath_registration –Ω–∞–ø—Ä—è–º—É—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await confirm_bath_registration(update, context)
        elif callback_data.startswith("paid_bath_"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ paid_bath_")
            date_str = callback_data.replace("paid_bath_", "")
            logger.info(f"[button_callback] paid_bath_ –¥–ª—è –¥–∞—Ç—ã {date_str}")
            await handle_payment_confirmation(update, context)
        elif callback_data.startswith("admin_confirm_"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ admin_confirm_")
            # –†–∞–∑–±–∏—Ä–∞–µ–º payment_type
            parts = callback_data.split("_")
            if len(parts) == 5:
                user_id = int(parts[2])
                date_str = parts[3]
                payment_type = parts[4]
            else:
                user_id = int(parts[2])
                date_str = parts[3]
                payment_type = None
            await admin_confirm_payment(update, context, user_id=user_id, date_str=date_str, payment_type=payment_type)
        elif callback_data.startswith("admin_decline_"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ admin_decline_")
            # –†–∞–∑–±–∏—Ä–∞–µ–º payment_type
            parts = callback_data.split("_")
            if len(parts) == 5:
                user_id = int(parts[2])
                date_str = parts[3]
                payment_type = parts[4]
            else:
                user_id = int(parts[2])
                date_str = parts[3]
                payment_type = None
            await admin_decline_payment(update, context, user_id=user_id, date_str=date_str, payment_type=payment_type)
        elif callback_data.startswith("message_user_"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ message_user_")
            await handle_message_to_user(update, context)
        elif callback_data.startswith("start_profile"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ start_profile")
            await start_profile_callback(update, context)
        elif callback_data.startswith("cash_bath_"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ cash_bath_")
            await handle_cash_payment(update, context)
        else:
            logger.info(f"[button_callback] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {callback_data}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ button_callback: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å" –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
async def confirm_bath_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[confirm_bath_registration] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        db.add_active_user(user.id, user.username or user.first_name)
        callback_data = query.data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é: {callback_data}")

        if callback_data.startswith("confirm_bath_"):
            date_str = callback_data.replace("confirm_bath_", "")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            participants = db.get_bath_participants(date_str)
            if len(participants) >= MAX_BATH_PARTICIPANTS:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —Å–º–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–Ω—è —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–º–µ—Ä–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'bath_registrations' not in context.user_data:
                context.user_data['bath_registrations'] = {}

            username = user.username or f"{user.first_name} {user.last_name or ''}"
            context.user_data['bath_registrations'][date_str] = {
                'user_id': user.id,
                'username': username,
                'status': 'pending_payment'
            }
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ {date_str}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            payment_info = f"–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–∞–Ω—é ({date_str}), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É:\n\n"
            payment_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST}\n\n"
            payment_info += f"–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
            payment_info += f"1. –ö–ê–†–¢–ê: {CARD_PAYMENT_LINK}\n"
            payment_info += f"2. Revolut: {REVOLUT_PAYMENT_LINK}\n\n"
            payment_info += f"–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∏–∂–µ."

            keyboard = [
                [
                    InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞) –æ–Ω–ª–∞–π–Ω", callback_data=f"paid_bath_{date_str}"),
                    InlineKeyboardButton("–ë—É–¥—É –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data=f"cash_bath_{date_str}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text=payment_info,
                reply_markup=reply_markup
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ confirm_bath_registration: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞)"
async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[handle_payment_confirmation] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        db.add_active_user(user.id, user.username or user.first_name)
        callback_data = query.data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É: {callback_data}")

        if callback_data.startswith("paid_bath_"):
            date_str = callback_data.replace("paid_bath_", "")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å—å –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if ('bath_registrations' in context.user_data and
                    date_str in context.user_data['bath_registrations']):

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                context.user_data['bath_registrations'][date_str]['status'] = 'payment_claimed'
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ {date_str}")

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = user.username or f"{user.first_name} {user.last_name or ''}"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
                user_data = {
                    'user_id': user.id,
                    'username': username,
                    'date_str': date_str
                }
                logger.info(f"–î–æ–±–∞–≤–ª—è—é –∑–∞—è–≤–∫—É: user_id={user.id}, username={username}, date_str={date_str}, payment_type=online")
                db.add_pending_payment(user.id, username, date_str, payment_type='online')
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await query.edit_message_text(
                    text=f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                         f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞–Ω–∏ –Ω–∞ {date_str}.\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                for admin_id in ADMIN_IDS:
                    try:
                        callback_data_confirm = f"admin_confirm_{user.id}_{date_str}_online"
                        callback_data_decline = f"admin_decline_{user.id}_{date_str}_online"
                        logger.info(f"–§–æ—Ä–º–∏—Ä—É—é callback_data: confirm={callback_data_confirm}, decline={callback_data_decline}")
                        keyboard = [
                            [
                                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª –æ–Ω–ª–∞–π–Ω", callback_data=callback_data_confirm),
                                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=callback_data_decline)
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user.id}) —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –±–∞–Ω—é –Ω–∞ {date_str}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –æ–ø–ª–∞—Ç—É (online)")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                        continue
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ."
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_payment_confirmation: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def admin_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, date_str, payment_type):
    query = update.callback_query
    await query.answer()

    admin_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in ADMIN_IDS:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return

    callback_data = query.data
    parts = callback_data.split("_")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ len(parts), –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    if parts[0] == "admin" and parts[1] == "confirm":
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º user_id, date_str, payment_type
        user_id = int(parts[2])
        date_str = parts[3]
        payment_type = parts[4] if len(parts) > 4 else None

        user_data = db.get_pending_payment(user_id, date_str, payment_type)
        logger.info(f"[admin_confirm_payment] –ò—â—É –∑–∞—è–≤–∫—É: user_id={user_id}, date_str={date_str}, payment_type={payment_type}")
        logger.info(f"[admin_confirm_payment] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {user_data}")
        if user_data:
            profile = db.get_user_profile(user_id)
            if not profile:
                await query.edit_message_text(
                    text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –∞ –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É."
                )
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text="–î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–Ω—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å:",
                        reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="start_profile")]
                        ])
                    )
                except Exception as e:
                    logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                return

            username = user_data.get('username')
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
            participants = db.get_bath_participants(date_str)
            user_in_participants = any(p['user_id'] == user_id for p in participants)
            if not user_in_participants:
                db.add_bath_participant(date_str, user_id, username, paid=False)
                # –ï—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏, –æ–±–Ω–æ–≤–ª—è–µ–º cash
                if payment_type == 'cash':
                    try:
                        conn = db.get_connection()
                        cursor = conn.cursor()
                        cursor.execute('UPDATE bath_participants SET cash = 1 WHERE date_str = ? AND user_id = ?', (date_str, user_id))
                        conn.commit()
                    finally:
                        conn.close()
            # –¢–µ–ø–µ—Ä—å –æ—Ç–º–µ—á–∞–µ–º –æ–ø–ª–∞—Ç—É
            db.mark_participant_paid(date_str, user_id)
            db.delete_pending_payment(user_id, date_str)
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω—é {date_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
                logger.info(f"[admin_confirm_payment] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            try:
                await query.edit_message_text(
                    text=f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–∞ {date_str}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
                )
                logger.info(f"[admin_confirm_payment] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
            # --- –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É ---
            try:
                logger.info(f"[admin_confirm_payment] –û–±–Ω–æ–≤–ª—è—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É {BATH_CHAT_ID} –¥–ª—è –¥–∞—Ç—ã {date_str}")
                participants = db.get_bath_participants(date_str)  # –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                participants_list = f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞–Ω–∏ –Ω–∞ {date_str}:\n\n"
                for i, participant in enumerate(participants, 1):
                    paid_status = "‚úÖ" if participant.get("paid") else "‚ùå"
                    cash_status = "üíµ" if participant.get("cash") else ""
                    participants_list += f"{i}. {participant['username']} {paid_status}{cash_status}\n"
                if len(participants) == 0:
                    participants_list += "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è\n"
                await context.bot.send_message(
                    chat_id=BATH_CHAT_ID,
                    text=f"@{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è(–∞—Å—å) –Ω–∞ –±–∞–Ω—é {date_str} ‚úÖ\n\n{participants_list}"
                )
                # --- –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ ---
                message = format_bath_message(date_str)
                pinned_messages = await context.bot.get_chat(BATH_CHAT_ID)
                logger.info(f"[admin_confirm_payment] –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π message_id –≤ —á–∞—Ç–µ: {pinned_messages.pinned_message.message_id if pinned_messages.pinned_message else 'None'}")
                # –§–æ—Ä–º–∏—Ä—É–µ–º reply_markup –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–∏–º–∏—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if len(participants) < MAX_BATH_PARTICIPANTS:
                    keyboard = [
                        [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_bath_{date_str}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                else:
                    reply_markup = None
                current_message = pinned_messages.pinned_message.text if pinned_messages.pinned_message else None
                current_markup = pinned_messages.pinned_message.reply_markup if pinned_messages.pinned_message else None
                logger.info(f"[admin_confirm_payment] –ü—ã—Ç–∞—é—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={pinned_messages.pinned_message.message_id if pinned_messages.pinned_message else 'None'}")
                logger.info(f"[admin_confirm_payment] –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {current_message}")
                logger.info(f"[admin_confirm_payment] –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {message}")
                logger.info(f"[admin_confirm_payment] –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {current_markup}")
                logger.info(f"[admin_confirm_payment] –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏: {reply_markup}")
                def markup_to_str(markup):
                    if not markup:
                        return ''
                    return str([[btn.text for btn in row] for row in markup.inline_keyboard])
                markup_changed = markup_to_str(current_markup) != markup_to_str(reply_markup)
                # –ï—Å–ª–∏ message_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                expected_message = message
                if not pinned_messages.pinned_message or current_message != expected_message:
                    logger.info(f"[admin_confirm_payment] –û—Ç–∫—Ä–µ–ø–ª—è—é —Å—Ç–∞—Ä–æ–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è—é –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
                    try:
                        await context.bot.unpin_all_chat_messages(BATH_CHAT_ID)
                    except Exception as e:
                        logger.warning(f"[admin_confirm_payment] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ
                    sent_message = await context.bot.send_message(
                        chat_id=BATH_CHAT_ID,
                        text=message,
                        reply_markup=reply_markup
                    )
                    await context.bot.pin_chat_message(
                        chat_id=BATH_CHAT_ID,
                        message_id=sent_message.message_id,
                        disable_notification=False
                    )
                    logger.info(f"[admin_confirm_payment] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {sent_message.message_id}")
                elif current_message != message or markup_changed:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=BATH_CHAT_ID,
                            message_id=pinned_messages.pinned_message.message_id,
                            text=message,
                            reply_markup=reply_markup
                        )
                        logger.info(f"[admin_confirm_payment] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
                    except Exception as e:
                        logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                else:
                    logger.info(f"[admin_confirm_payment] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã")
                logger.info(f"[admin_confirm_payment] –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
            except Exception as e:
                logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {e}")
            # --- –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø ---
        else:
            try:
                await query.edit_message_text(
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª."
                )
                logger.info(f"[admin_confirm_payment] –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id}, date_str={date_str}, payment_type={payment_type}")
            except Exception as e:
                logger.error(f"[admin_confirm_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def admin_decline_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, date_str, payment_type):
    query = update.callback_query
    await query.answer()

    admin_id = update.effective_user.id

    if admin_id not in ADMIN_IDS:
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return

    callback_data = query.data
    parts = callback_data.split("_")

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ len(parts), –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    if parts[0] == "admin" and parts[1] == "decline":
        user_id = int(parts[2])
        date_str = parts[3]
        payment_type = parts[4] if len(parts) > 4 else None

        user_data = db.get_pending_payment(user_id, date_str, payment_type)
        logger.info(f"[admin_decline_payment] –ò—â—É –∑–∞—è–≤–∫—É: user_id={user_id}, date_str={date_str}, payment_type={payment_type}")
        logger.info(f"[admin_decline_payment] –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {user_data}")
        if user_data:
            username = user_data.get('username')
            db.delete_pending_payment(user_id, date_str)
            keyboard = [
                [InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"message_user_{user_id}_{date_str}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            try:
                await query.edit_message_text(
                    text=f"–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–∞ {date_str}. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º.",
                    reply_markup=reply_markup
                )
                logger.info(f"[admin_decline_payment] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"[admin_decline_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞ –±–∞–Ω—é {date_str} –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                )
                logger.info(f"[admin_decline_payment] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"[admin_decline_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            try:
                await query.edit_message_text(
                    text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å —É—Å—Ç–∞—Ä–µ–ª."
                )
                logger.info(f"[admin_decline_payment] –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è user_id={user_id}, date_str={date_str}, payment_type={payment_type}")
            except Exception as e:
                logger.error(f"[admin_decline_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞—è–≤–∫–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ" –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
async def handle_message_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ù–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–Ω–µ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
    if update.effective_chat.type != "private":
        return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ callback query
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    else:
        query = None

    admin_id = update.effective_user.id

    # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (WAITING_ADMIN_MESSAGE), —Ä–∞–∑—Ä–µ—à–∞–µ–º
    if context.user_data.get('messaging_user_id'):
        pass  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–µ
    # –ï—Å–ª–∏ —ç—Ç–æ callback query –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º
    elif query and query.data.startswith("message_user_"):
        pass  # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∏–∂–µ
    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥–∏–∞–ª–æ–≥–∞–º –ø—Ä–æ—Ñ–∏–ª—è –∏ —Ç.–¥.)
    else:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if admin_id not in ADMIN_IDS:
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END

    # –ï—Å–ª–∏ —ç—Ç–æ callback query, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ
    if query:
        callback_data = query.data
        parts = callback_data.split("_")

        if len(parts) >= 3 and parts[0] == "message" and parts[1] == "user":
            user_id = int(parts[2])

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['messaging_user_id'] = user_id

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.edit_message_text(
                text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            )

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            return "WAITING_ADMIN_MESSAGE"

    return ConversationHandler.END


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def get_admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_message = update.message.text
    user_id = context.user_data.get('messaging_user_id')

    if user_id:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_message}"
            )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await update.message.reply_text(
                text="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
            )
        except Exception as e:
            await update.message.reply_text(
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
            )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        if 'messaging_user_id' in context.user_data:
            del context.user_data['messaging_user_id']
    else:
        await update.message.reply_text(
            text="–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ."
        )

    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É
async def mark_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[mark_paid] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /mark_paid")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[mark_paid] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[mark_paid] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        if not context.args or len(context.args) < 2:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /mark_paid <username> <–¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY>")
            logger.info("[mark_paid] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
            return
        username = context.args[0].replace("@", "")
        date_str = context.args[1]
        participants = db.get_bath_participants(date_str)
        user_found = False
        for participant in participants:
            if participant["username"].lower() == username.lower():
                user_id_to_mark = participant["user_id"]
                if db.mark_participant_paid(date_str, user_id_to_mark):
                    message = update.message or (update.callback_query and update.callback_query.message)
                    if message:
                        await message.reply_text(f"–û–ø–ª–∞—Ç–∞ –¥–ª—è @{username} –Ω–∞ {date_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")
                    logger.info(f"[mark_paid] –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è {username} –Ω–∞ {date_str}")
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∏ —Ç.–¥. (–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å)
                user_found = True
                break
        if not user_found:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ {date_str}.")
            logger.warning(f"[mark_paid] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ {date_str}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ mark_paid: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã.")

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
async def monday_notification(context: ContextTypes.DEFAULT_TYPE):
    next_sunday = get_next_sunday()
    cleared_events = db.clear_previous_bath_events(except_date_str=next_sunday)
    db.create_bath_event(next_sunday)
    message = format_bath_message(next_sunday)
    participants = db.get_bath_participants(next_sunday)
    if len(participants) < MAX_BATH_PARTICIPANTS:
        keyboard = [
            [InlineKeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"join_bath_{next_sunday}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
    else:
        reply_markup = None
    old_pinned_id = db.get_last_pinned_message_id(BATH_CHAT_ID)
    if old_pinned_id:
        try:
            await context.bot.unpin_chat_message(chat_id=BATH_CHAT_ID, message_id=old_pinned_id)
            db.delete_pinned_message_id(old_pinned_id, BATH_CHAT_ID)
        except Exception as e:
            logger.warning(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}')
    sent_message = await context.bot.send_message(
        chat_id=BATH_CHAT_ID,
        text=message,
        reply_markup=reply_markup
    )
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    pinned_messages = await context.bot.get_chat(BATH_CHAT_ID)
    if pinned_messages.pinned_message:
        current_message = pinned_messages.pinned_message.text
        current_markup = pinned_messages.pinned_message.reply_markup
        def markup_to_str(markup):
            if not markup:
                return ''
            return str([[btn.text for btn in row] for row in markup.inline_keyboard])
        markup_changed = markup_to_str(current_markup) != markup_to_str(reply_markup)
        if current_message != message or markup_changed:
            try:
                await context.bot.edit_message_text(
                    chat_id=BATH_CHAT_ID,
                    message_id=pinned_messages.pinned_message.message_id,
                    text=message,
                    reply_markup=reply_markup
                )
                logger.info(f"[monday_notification] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
            except Exception as e:
                logger.error(f"[monday_notification] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            logger.info(f"[monday_notification] –°–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    else:
        await context.bot.pin_chat_message(
            chat_id=BATH_CHAT_ID,
            message_id=sent_message.message_id,
            disable_notification=False
        )
        db.set_pinned_message_id(next_sunday, sent_message.message_id, BATH_CHAT_ID)
        logger.info(f"[monday_notification] –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {sent_message.message_id}")
    if cleared_events > 0:
        await context.bot.send_message(
            chat_id=BATH_CHAT_ID,
            text=f"üîÑ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é {next_sunday}. –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–∞–Ω–∏ –æ—á–∏—â–µ–Ω."
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
async def add_subscriber(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[add_subscriber] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /add_subscriber")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[add_subscriber] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[add_subscriber] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        if not context.args or len(context.args) < 2:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_subscriber <username –∏–ª–∏ user_id> <—Å—Ä–æ–∫ –≤ –¥–Ω—è—Ö>")
            logger.info("[add_subscriber] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
            return
        target = context.args[0]
        days = int(context.args[1])
        try:
            target_id = int(target)
            user = await context.bot.get_chat(target_id)
            username = user.username or f"{user.first_name} {user.last_name or ''}"
        except ValueError:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ user_id –≤–º–µ—Å—Ç–æ username.")
            logger.warning("[add_subscriber] –ü–µ—Ä–µ–¥–∞–Ω –Ω–µ user_id")
            return
        paid_until = (datetime.now() + timedelta(days=days)).timestamp()
        db.add_subscriber(target_id, username, paid_until)
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {username} (ID: {target_id}) –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {days} –¥–Ω–µ–π.")
        logger.info(f"[add_subscriber] –ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è {username} (ID: {target_id}) –Ω–∞ {days} –¥–Ω–µ–π")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ add_subscriber: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
async def remove_subscriber(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[remove_subscriber] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /remove_subscriber")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[remove_subscriber] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[remove_subscriber] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        if not context.args:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove_subscriber <user_id>")
            logger.info("[remove_subscriber] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
            return
        try:
            target_id = int(context.args[0])
            result = db.remove_subscriber(target_id)
            message = update.message or (update.callback_query and update.callback_query.message)
            if result:
                if message:
                    await message.reply_text(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {target_id} —É–¥–∞–ª–µ–Ω–∞.")
                logger.info(f"[remove_subscriber] –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}")
            else:
                if message:
                    await message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
                logger.warning(f"[remove_subscriber] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        except ValueError:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
            logger.warning("[remove_subscriber] –ü–µ—Ä–µ–¥–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ remove_subscriber: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
async def check_subscriptions(context: ContextTypes.DEFAULT_TYPE):
    expired_users = db.get_expired_subscribers()

    for user_id in expired_users:
        try:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–∞—Ç–∞
            await context.bot.ban_chat_member(
                chat_id=BATH_CHAT_ID,
                user_id=user_id
            )

            # –ò —Å—Ä–∞–∑—É —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å—Å—è, –µ—Å–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É
            await context.bot.unban_chat_member(
                chat_id=BATH_CHAT_ID,
                user_id=user_id,
                only_if_banned=True
            )

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑-–∑–∞ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")

            # –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db.remove_subscriber(user_id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def post_init(application: Application) -> None:
    """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("register", "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: /register 12.05.2025)"),
        BotCommand("history", "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –±–∞–Ω–∏"),
        BotCommand("visits", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–∏–π –∏ –¥–∞—Ç—ã"),
        BotCommand("profile", "–ü—Ä–æ—Å–º–æ—Ç—Ä/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ")
    ]

    # –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_commands = user_commands + [
        BotCommand("cash_list", "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–ø–ª–∞—Ç–æ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"),
        BotCommand("create_bath", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"),
        BotCommand("mark_paid", "–û—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (/mark_paid username DD.MM.YYYY)"),
        BotCommand("add_subscriber", "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (/add_subscriber user_id days)"),
        BotCommand("remove_subscriber", "–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞ (/remove_subscriber user_id)"),
        BotCommand("update_commands", "–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"),
        BotCommand("export_profiles", "–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand("mention_all", "–£–ø–æ–º—è–Ω—É—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –±–∞–Ω–∏"),
        BotCommand("mark_visit", "–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ –±–∞–Ω–∏"),
        BotCommand("clear_db", "–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)")
    ]

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await application.bot.set_my_commands(user_commands)

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –º–µ–Ω—é —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in ADMIN_IDS:
        try:
            await application.bot.set_my_commands(
                admin_commands,
                scope=BotCommandScopeChat(chat_id=admin_id)
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {admin_id}: {e}")

def escape_markdown(text):
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + c if c in escape_chars else c for c in str(text)])

async def mention_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[mention_all] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /mention_all")
    try:
        user_id = update.effective_user.id
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[mention_all] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        if user_id not in ADMIN_IDS:
            logger.warning(f"[mention_all] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return
        conn = db.get_connection()
        try:
            cursor = conn.cursor()
            cursor.execute('SELECT user_id, username FROM active_users')
            all_users = cursor.fetchall()
        finally:
            conn.close()
        if not all_users:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
            logger.info("[mention_all] –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            return
        mentions = []
        for uid, username in all_users:
            if username:
                mentions.append(f"@{escape_markdown(username)}")
            else:
                mentions.append(f"[user](tg://user?id={uid})")
        mention_text = " ".join(mentions)
        if len(mention_text) > 4000:
            mention_text = mention_text[:4000] + " ..."
        custom_message = " ".join(context.args) if context.args else "–í–Ω–∏–º–∞–Ω–∏–µ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º!"
        custom_message = escape_markdown(custom_message)
        await context.bot.send_message(
            chat_id=BATH_CHAT_ID,
            text=f"üì¢ {custom_message}\n\n{mention_text}",
            parse_mode="MarkdownV2"
        )
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
        logger.info(f"[mention_all] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ mention_all: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã.")

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[history] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /history")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[history] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        db.add_active_user(user_id, update.effective_user.username or update.effective_user.first_name)
        history = db.get_user_bath_history(user_id)
        if not history:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏–π –±–∞–Ω–∏.")
            logger.info(f"[history] –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        message_text = "üìÖ –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π –±–∞–Ω–∏:\n\n"
        for entry in history:
            status = "‚úÖ" if entry["visited"] else "‚ùå"
            paid = "üí∞" if entry["paid"] else "üí∏"
            message_text += f"{entry['date']} {status} {paid}\n"
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(message_text)
        logger.info(f"[history] –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ history: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[stats] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /stats")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[stats] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        if update.effective_user.id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            logger.warning(f"[stats] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        end_date = datetime.now().strftime("%d.%m.%Y")
        start_date = (datetime.now() - timedelta(days=90)).strftime("%d.%m.%Y")
        stats = db.get_bath_statistics(start_date, end_date)
        if not stats:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö.")
            logger.info("[stats] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥")
            return
        message_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–µ–Ω–∏–π –±–∞–Ω–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞:\n\n"
        for entry in stats:
            message_text += f"–î–∞—Ç–∞: {entry['date']}\n"
            message_text += f"–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {entry['total']}\n"
            message_text += f"–û–ø–ª–∞—Ç–∏–ª–∏: {entry['paid']}\n"
            message_text += f"–ü–æ—Å–µ—Ç–∏–ª–∏: {entry['visited']}\n\n"
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(message_text)
        logger.info("[stats] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ stats: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

async def mark_visit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("[mark_visit] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /mark_visit")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[mark_visit] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        if not context.args:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            logger.info("[mark_visit] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∞—Ç–∞")
            return
        date_str = context.args[0]
        user_id = update.effective_user.id
        if db.mark_visit(date_str, user_id):
            db.update_visit_statistics(user_id, date_str)
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text(f"‚úÖ –ü–æ—Å–µ—â–µ–Ω–∏–µ –±–∞–Ω–∏ {date_str} –æ—Ç–º–µ—á–µ–Ω–æ!")
            logger.info(f"[mark_visit] –ü–æ—Å–µ—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {date_str}")
        else:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            logger.warning(f"[mark_visit] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {date_str}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ mark_visit: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –ø–æ—Å–µ—â–µ–Ω–∏—è.")

async def visits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info("[visits] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /visits")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[visits] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        db.add_active_user(user_id, update.effective_user.username or update.effective_user.first_name)
        visits_count = db.get_user_visits_count(user_id)
        history = db.get_user_bath_history(user_id)
        if visits_count == 0:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–í—ã –µ—â–µ –Ω–µ –ø–æ—Å–µ—â–∞–ª–∏ –±–∞–Ω—é.")
            logger.info(f"[visits] –ù–µ—Ç –ø–æ—Å–µ—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return
        message_text = f"–í—ã –ø–æ—Å–µ—Ç–∏–ª–∏ –±–∞–Ω—é {visits_count} —Ä–∞–∑(–∞):\n\n"
        visited_dates = [entry for entry in history if entry["visited"]]
        visited_dates.sort(key=lambda x: datetime.strptime(x["date"], "%d.%m.%Y"), reverse=True)
        for entry in visited_dates:
            message_text += f"üìÖ {entry['date']}\n"
        logger.info(f"[visits] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} checked their visits count: {visits_count}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(message_text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ visits: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö.")

# –í–†–ï–ú–ï–ù–ù–û: –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
async def clear_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[clear_db] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /clear_db")
    try:
        user_id = update.effective_user.id
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[clear_db] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            logger.warning(f"[clear_db] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        db.clear_all_data()
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω–∞.")
        logger.info("[clear_db] –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ clear_db: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")

async def update_commands(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[update_commands] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /update_commands")
    try:
        user_id = update.effective_user.id
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[update_commands] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            logger.warning(f"[update_commands] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        await post_init(context.application)
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        logger.info("[update_commands] –ú–µ–Ω—é –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ update_commands: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥.")

# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
PROFILE = 0
FULL_NAME = 1
BIRTH_DATE = 2
OCCUPATION = 3
INSTAGRAM = 4
SKILLS = 5

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat = update.effective_chat
    if chat.type != "private":
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return ConversationHandler.END
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    profile = db.get_user_profile(user_id)
    message = update.message or (update.callback_query and update.callback_query.message)
    if profile:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        text = "üìã –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        text += f"üë§ –ò–º—è: {profile['full_name']}\n"
        text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {profile['birth_date']}\n"
        text += f"üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {profile['occupation']}\n"
        text += f"üì∏ Instagram: {profile['instagram']}\n"
        text += f"üéØ –ß–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω: {profile['skills']}\n"
        text += f"üèÜ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {profile['total_visits']}\n"
        if profile['first_visit_date']:
            text += f"üìÖ –ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {profile['first_visit_date']}\n"
        if profile['last_visit_date']:
            text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {profile['last_visit_date']}\n"
        text += "\n–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç)"
        if message:
            await message.reply_text(text)
        return PROFILE
    else:
        if message:
            await message.reply_text(
                "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.\n"
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)"
            )
        return FULL_NAME

async def handle_profile_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message = update.message or (update.callback_query and update.callback_query.message)
    if query.data == "update_profile_yes":
        if message:
            await message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
            )
        return FULL_NAME
    else:
        if message:
            await message.reply_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        return ConversationHandler.END

async def handle_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['full_name'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –º–∞—Ä—Ç–∞):"
        )
        return BIRTH_DATE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_full_name: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def handle_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_text = update.message.text.strip()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú
        if not re.match(r"^\d{1,2}\.\d{1,2}$", date_text):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03)"
            )
            return BIRTH_DATE
        context.user_data['birth_date'] = date_text
        await update.message.reply_text(
            "–ß–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å? (—Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏):"
        )
        return OCCUPATION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_birth_date: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def handle_occupation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['occupation'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Instagram (–∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å):"
        )
        return INSTAGRAM
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_occupation: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def handle_instagram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['instagram'] = update.message.text
        await update.message.reply_text(
            "–°—Ñ–µ—Ä–∞ –±–∏–∑–Ω–µ—Å–∞, –æ–±–ª–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã, —Ç–∏–ø —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∏ —Ç.–¥."
        )
        return SKILLS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_instagram: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def handle_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data['skills'] = update.message.text
    message = update.message or (update.callback_query and update.callback_query.message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    success = db.save_user_profile(
        user_id=user.id,
        username=user.username or user.first_name,
        full_name=context.user_data['full_name'],
        birth_date=context.user_data['birth_date'],
        occupation=context.user_data['occupation'],
        instagram=context.user_data['instagram'],
        skills=context.user_data['skills']
    )
    
    if success:
        if message:
            await message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /profile"
            )
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_pending = None
        for date_str in [p['date_str'] for p in db.get_all_user_profiles() if p['user_id'] == user.id]:
            pending = db.get_pending_payment(user.id, date_str)
            if pending:
                user_pending = pending
                break
        if user_pending:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    keyboard = [
                        [
                            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª –æ–Ω–ª–∞–π–Ω", callback_data=f"admin_confirm_{user.id}_{user_pending['date_str']}_online"),
                            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{user.id}_{user_pending['date_str']}_online")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    profile_info = (
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name} –∑–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                        f"üë§ –ò–º—è: {context.user_data['full_name']}\n"
                        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data['birth_date']}\n"
                        f"üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {context.user_data['occupation']}\n"
                        f"üì∏ Instagram: {context.user_data['instagram']}\n"
                        f"üéØ –°—Ñ–µ—Ä–∞ –±–∏–∑–Ω–µ—Å–∞, –æ–±–ª–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã, —Ç–∏–ø —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {context.user_data['skills']}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –±–∞–Ω–∏ –Ω–∞ {user_pending['date_str']}."
                    )
                    
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=profile_info,
                        reply_markup=reply_markup
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    else:
        if message:
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    return ConversationHandler.END

async def send_bath_summary(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞–Ω–∏ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º."""
    today = datetime.now().strftime("%d.%m.%Y")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–∫—É—â–µ–π –±–∞–Ω–∏
    participants = db.get_bath_participants(today)
    if not participants:
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìä –°–≤–æ–¥–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞–Ω–∏ {today}:\n\n"
    
    for participant in participants:
        profile = db.get_user_profile(participant['user_id'])
        if profile:
            message += f"üë§ {profile['full_name']}\n"
            if profile['birth_date']:
                message += f"üéÇ {profile['birth_date']}\n"
            if profile['occupation']:
                message += f"üíº {profile['occupation']}\n"
            if profile['instagram']:
                message += f"üì∏ {profile['instagram']}\n"
            if profile['skills']:
                message += f"üéØ –ß–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω: {profile['skills']}\n"
            # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Å–µ—â–µ–Ω–∏–π
            message += "\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    for participant in participants:
        try:
            await context.bot.send_message(
                chat_id=participant['user_id'],
                text=message,
                parse_mode='HTML'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {participant['user_id']}: {e}")

# Handler for the '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å' button
async def start_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    logger.info(f"[start_profile_callback] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
    
    try:
        await query.answer()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ
        if update.effective_chat.type != "private":
            await query.edit_message_text("–ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è
        await query.edit_message_text("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)")
        logger.info(f"–ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        return FULL_NAME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start_profile_callback: {e}")
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            pass
        return ConversationHandler.END

async def export_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[export_profiles] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /export_profiles")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[export_profiles] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[export_profiles] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
        profiles = db.get_all_user_profiles()  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        if not profiles:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
            return
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV-—Ñ–∞–π–ª
        with tempfile.NamedTemporaryFile(mode='w+', newline='', delete=False, suffix='.csv') as tmpfile:
            fieldnames = [
                'user_id', 'username', 'full_name', 'birth_date', 'occupation',
                'instagram', 'skills', 'total_visits', 'first_visit_date', 'last_visit_date'
            ]
            writer = csv.DictWriter(tmpfile, fieldnames=fieldnames)
            writer.writeheader()
            for profile in profiles:
                writer.writerow({k: profile.get(k, '') for k in fieldnames})
            tmpfile_path = tmpfile.name
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        with open(tmpfile_path, 'rb') as f:
            await context.bot.send_document(
                chat_id=user_id,
                document=f,
                filename='bath_users.csv',
                caption='–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
            )
        logger.info(f"[export_profiles] –§–∞–π–ª —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ export_profiles: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø—Ä–æ—Ñ–∏–ª–µ–π.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ë—É–¥—É –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏"
async def handle_cash_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[handle_cash_payment] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        db.add_active_user(user.id, user.username or user.first_name)
        callback_data = query.data
        if callback_data.startswith("cash_bath_"):
            date_str = callback_data.replace("cash_bath_", "")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –Ω–∞–ª–∏—á–Ω—ã–µ
            if 'bath_registrations' not in context.user_data:
                context.user_data['bath_registrations'] = {}
            username = user.username or f"{user.first_name} {user.last_name or ''}"
            context.user_data['bath_registrations'][date_str] = {
                'user_id': user.id,
                'username': username,
                'status': 'pending_cash'
            }
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ {date_str}")

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É bath_participants —Å cash=True (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
            # –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ cash –≤ —Ç–∞–±–ª–∏—Ü—É bath_participants, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            try:
                conn = db.get_connection()
                cursor = conn.cursor()
                cursor.execute('ALTER TABLE bath_participants ADD COLUMN cash BOOLEAN DEFAULT 0')
                conn.commit()
            except Exception as e:
                pass  # –ø–æ–ª–µ —É–∂–µ –µ—Å—Ç—å
            finally:
                conn.close()
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å cash=True
            db.add_bath_participant(date_str, user.id, username, paid=False)  # paid=False, cash=True
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ cash –≤—Ä—É—á–Ω—É—é
            try:
                conn = db.get_connection()
                cursor = conn.cursor()
                cursor.execute('UPDATE bath_participants SET cash = 1 WHERE date_str = ? AND user_id = ?', (date_str, user.id))
                conn.commit()
            finally:
                conn.close()

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞—è–≤–∫—É, –µ—Å–ª–∏ –±—ã–ª–∞
            db.delete_pending_payment(user.id, date_str)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏ –≤ pending_payments
            db.add_pending_payment(user.id, username, date_str, payment_type='cash')
            logger.info(f"[handle_cash_payment] –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–ª–∏—á–Ω—ã–º–∏: user_id={user.id}, username={username}, date_str={date_str}, payment_type=cash")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await query.edit_message_text(
                text=f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin_id in ADMIN_IDS:
                try:
                    callback_data_confirm = f"admin_confirm_{user.id}_{date_str}_cash"
                    callback_data_decline = f"admin_decline_{user.id}_{date_str}_cash"
                    logger.info(f"–§–æ—Ä–º–∏—Ä—É—é callback_data: confirm={callback_data_confirm}, decline={callback_data_decline}")
                    keyboard = [
                        [
                            InlineKeyboardButton("–¥–∞, –Ω–∞–ª–∏—á–Ω—ã–µ", callback_data=callback_data_confirm),
                            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=callback_data_decline)
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=(
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user.id}) –≤—ã–±—Ä–∞–ª –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ {date_str}. "
                            f"–°–æ–≥–ª–∞—Å–Ω—ã –ª–∏ –≤—ã, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–ª–∞—Ç–∏—Ç –Ω–∞–ª–∏—á–∫–æ–π?\n"
                            f"–í –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —è –æ—Ç–ø—Ä–∞–≤–ª—é –≤–∞–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –Ω–∞–ª–∏—á–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π."
                        ),
                        reply_markup=reply_markup
                    )
                    logger.info(f"[handle_cash_payment] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É {admin_id} (cash)")
                except Exception as e:
                    logger.error(f"[handle_cash_payment] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_cash_payment: {e}")
        await update.callback_query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ 10:00 –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
async def send_cash_payments_list(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≤—ã–±—Ä–∞–≤—à–∏—Ö –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏, –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."""
    today = datetime.now().strftime("%d.%m.%Y")
    conn = db.get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('''
            SELECT bp.user_id, bp.username, up.full_name FROM bath_participants bp
            LEFT JOIN user_profiles up ON bp.user_id = up.user_id
            WHERE bp.date_str = ? AND bp.cash = 1
        ''', (today,))
        rows = cursor.fetchall()
        if not rows:
            return
        message = f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –≤—ã–±—Ä–∞–≤—à–∏—Ö –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏ –Ω–∞ {today}:\n\n"
        for row in rows:
            message += f"@{row[1]} | {row[2] or ''}\n"
        for admin_id in ADMIN_IDS:
            try:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=message
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –∞–¥–º–∏–Ω—É {admin_id}: {e}")
    finally:
        conn.close()

async def cash_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[cash_list] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /cash_list")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[cash_list] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[cash_list] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        conn = db.get_connection()
        try:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT username, date_str FROM bath_participants WHERE cash = 1
            ''')
            rows = cursor.fetchall()
        finally:
            conn.close()
        if not rows:
            await update.message.reply_text("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–ø–ª–∞—Ç–æ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏.")
            return
        message = "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –æ–ø–ª–∞—Ç–æ–π –Ω–∞–ª–∏—á–Ω—ã–º–∏:\n\n"
        for row in rows:
            message += f"@{row[0]} ‚Äî {row[1]}\n"
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ cash_list: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.")

async def notify_pending_payments(context: ContextTypes.DEFAULT_TYPE):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –≤—Å–µ—Ö –≤–∏—Å—è—â–∏—Ö –∑–∞—è–≤–∫–∞—Ö –≤ pending_payments."""
    conn = db.get_connection()
    try:
        cursor = conn.cursor()
        cursor.execute('SELECT username, date_str FROM pending_payments')
        rows = cursor.fetchall()
    finally:
        conn.close()
    if not rows:
        return
    message = "–í–∏—Å—è—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
    for row in rows:
        message += f"@{row[0]} ‚Äî {row[1]}\n"
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(chat_id=admin_id, text=message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ pending_payments –∞–¥–º–∏–Ω—É {admin_id}: {e}")

async def remind_pending_payments(context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑ –≤ —á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö, –µ—Å–ª–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ 4 —á–∞—Å–∞."""
    reminders = db.get_pending_payments_for_reminder(hours=4)
    if not reminders:
        return
    for user_id, username, date_str, payment_type in reminders:
        if payment_type == 'cash':
            confirm_text = "–¥–∞, –Ω–∞–ª–∏—á–Ω—ã–µ"
        else:
            confirm_text = "–û–ø–ª–∞—Ç–∏–ª –æ–Ω–ª–∞–π–Ω"
        message = (
            f"–í–∏—Å—è—Ç –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
            f"@{username} ‚Äî {date_str}\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."
        )
        for admin_id in ADMIN_IDS:
            try:
                keyboard = [
                    [
                        InlineKeyboardButton(confirm_text, callback_data=f"admin_confirm_{user_id}_{date_str}_{payment_type}"),
                        InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{user_id}_{date_str}_{payment_type}")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await context.bot.send_message(chat_id=admin_id, text=message, reply_markup=reply_markup)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        db.update_last_notified(user_id, date_str)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –±–∞–Ω–µ
async def update_pinned_bath_message(context, date_str, participants, message, reply_markup):
    pinned_messages = await context.bot.get_chat(BATH_CHAT_ID)
    logger.info(f"[update_pinned_bath_message] –ó–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π message_id –≤ —á–∞—Ç–µ: {pinned_messages.pinned_message.message_id if pinned_messages.pinned_message else 'None'}")
    current_message = pinned_messages.pinned_message.text if pinned_messages.pinned_message else None
    current_markup = pinned_messages.pinned_message.reply_markup if pinned_messages.pinned_message else None
    logger.info(f"[update_pinned_bath_message] –ü—ã—Ç–∞—é—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: message_id={pinned_messages.pinned_message.message_id if pinned_messages.pinned_message else 'None'}")
    logger.info(f"[update_pinned_bath_message] –¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: {current_message}")
    logger.info(f"[update_pinned_bath_message] –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {message}")
    logger.info(f"[update_pinned_bath_message] –¢–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏: {current_markup}")
    logger.info(f"[update_pinned_bath_message] –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏: {reply_markup}")
    def markup_to_str(markup):
        if not markup:
            return ''
        return str([[btn.text for btn in row] for row in markup.inline_keyboard])
    markup_changed = markup_to_str(current_markup) != markup_to_str(reply_markup)
    # –ï—Å–ª–∏ message_id –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º –≤—Å–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    expected_message = message
    if not pinned_messages.pinned_message or current_message != expected_message:
        logger.info(f"[update_pinned_bath_message] –û—Ç–∫—Ä–µ–ø–ª—è—é —Å—Ç–∞—Ä–æ–µ –∏ –∑–∞–∫—Ä–µ–ø–ª—è—é –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        try:
            await context.bot.unpin_all_chat_messages(BATH_CHAT_ID)
        except Exception as e:
            logger.warning(f"[update_pinned_bath_message] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        sent_message = await context.bot.send_message(
            chat_id=BATH_CHAT_ID,
            text=message,
            reply_markup=reply_markup
        )
        await context.bot.pin_chat_message(
            chat_id=BATH_CHAT_ID,
            message_id=sent_message.message_id,
            disable_notification=False
        )
        logger.info(f"[update_pinned_bath_message] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ: {sent_message.message_id}")
    elif current_message != message or markup_changed:
        try:
            await context.bot.edit_message_text(
                chat_id=BATH_CHAT_ID,
                message_id=pinned_messages.pinned_message.message_id,
                text=message,
                reply_markup=reply_markup
            )
            logger.info(f"[update_pinned_bath_message] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"[update_pinned_bath_message] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        logger.info(f"[update_pinned_bath_message] –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º!)
        profile_handler = ConversationHandler(
            entry_points=[
                CommandHandler("profile", profile),
                CallbackQueryHandler(start_profile_callback, pattern="^start_profile$"),
            ],
            states={
                PROFILE: [
                    CallbackQueryHandler(handle_profile_update, pattern="^update_profile_"),
                ],
                FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_full_name)],
                BIRTH_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_birth_date)],
                OCCUPATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_occupation)],
                INSTAGRAM: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_instagram)],
                SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_skills)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        application.add_handler(profile_handler)

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("register", register_bath))
        application.add_handler(CommandHandler("create_bath", create_bath_event))
        application.add_handler(CommandHandler("mark_paid", mark_paid))
        application.add_handler(CommandHandler("add_subscriber", add_subscriber))
        application.add_handler(CommandHandler("remove_subscriber", remove_subscriber))
        application.add_handler(CommandHandler("mention_all", mention_all))
        application.add_handler(CommandHandler("history", history))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CommandHandler("mark_visit", mark_visit))
        application.add_handler(CommandHandler("visits", visits))
        application.add_handler(CommandHandler("clear_db", clear_db))
        application.add_handler(CommandHandler("update_commands", update_commands))
        application.add_handler(CommandHandler("export_profiles", export_profiles))
        application.add_handler(CommandHandler("cash_list", cash_list))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(button_callback))

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message_to_user))

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        application.post_init = post_init
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –ø–æ—Å–ª–µ –±–∞–Ω–∏
        job_queue = application.job_queue
        if job_queue:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–∞–Ω—é –ø–æ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞–º —É—Ç—Ä–æ–º –≤ 8:00
            job_queue.run_daily(
                 monday_notification,
                 time=time(hour=8, minute=0),
                 days=(0,)  # 0 = Monday
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∫–∞–∂–¥—ã–π –≤–æ—Å–∫—Ä–µ—Å–Ω—ã–π –≤–µ—á–µ—Ä –≤ 20:00
            job_queue.run_daily(
                send_bath_summary,
                time=time(hour=20, minute=0),
                days=(6,)  # 6 = Sunday
            )
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ª–∏—á–Ω—ã—Ö –≤ 10:00 –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º
        job_queue.run_daily(
            send_cash_payments_list,
            time=time(hour=10, minute=0),
            days=(6,)  # 6 = Sunday
        )
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞—è–≤–æ–∫ –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —É—Ç—Ä–æ–º
        job_queue.run_daily(
            lambda context: db.cleanup_old_pending_payments(days=7),
            time=time(hour=10, minute=0),
            days=(6,)
        )
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ pending_payments –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —É—Ç—Ä–æ–º
        job_queue.run_daily(
            notify_pending_payments,
            time=time(hour=10, minute=0),
            days=(6,)
        )
        
        # –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ –Ω–µ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö –∫–∞–∂–¥—ã–π —á–∞—Å
        job_queue.run_repeating(remind_pending_payments, interval=3600, first=0)
        
        # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ polling
        application.run_polling()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    main()
