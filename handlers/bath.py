import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import BATH_TIME, BATH_COST, MAX_BATH_PARTICIPANTS, ADMIN_IDS, BATH_CHAT_ID, CARD_PAYMENT_LINK, REVOLUT_PAYMENT_LINK
from utils.formatting import format_bath_message
from database import Database
from utils.logging import setup_logging

# get_next_sunday –∏ handle_deep_link —Ç–æ–∂–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è —Å—é–¥–∞
import pytz
from datetime import datetime, timedelta

db = Database()
logger = setup_logging()

def get_next_sunday():
    try:
        tz = pytz.timezone('Europe/Warsaw')
        today = datetime.now(tz)
        days_until_sunday = (6 - today.weekday()) % 7
        if days_until_sunday == 0:
            days_until_sunday = 7
        next_sunday = today + timedelta(days=days_until_sunday)
        return next_sunday.strftime("%d.%m.%Y")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è: {e}")
        raise

async def handle_deep_link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args or not context.args[0].startswith("bath_"):
        return
    date_str = context.args[0].replace("bath_", "")
    bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
    bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
    bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
    bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        text=bath_info,
        reply_markup=reply_markup
    )

async def register_bath(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[register_bath] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /register")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[register_bath] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user = update.effective_user
        logger.debug(f"[register_bath] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        if not context.args:
            next_sunday = get_next_sunday()
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text(
                    f"–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å –¥–∞—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ /register DD.MM.YYYY\n\n"
                    f"–ù–∞–ø—Ä–∏–º–µ—Ä: /register {next_sunday}"
                )
            logger.info("[register_bath] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
            return
        date_str = context.args[0]
        logger.debug(f"[register_bath] –î–∞—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date_str}")
        bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
        bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
        bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
        bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text(
                text=bath_info,
                reply_markup=reply_markup
            )
        logger.info(f"[register_bath] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ {date_str} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ register_bath: {e}")
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def create_bath_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        logger.info("[create_bath_event] Command received")
        
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[create_bath_event] Command used in non-private chat")
            return
            
        admin_id = update.effective_user.id
        if admin_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[create_bath_event] Non-admin user {admin_id} attempted to create event")
            return
            
        next_sunday = get_next_sunday()
        logger.info(f"[create_bath_event] Creating bath event for {next_sunday}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
        cleared_events = db.clear_old_events()
        logger.info(f"[create_bath_event] Cleared {cleared_events} old events")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
        participants = db.get_bath_participants(next_sunday)
        message_text = format_bath_message(next_sunday, participants)
        reply_markup = create_bath_keyboard(next_sunday)
        
        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        old_pinned_id = db.get_pinned_message_id()
        if old_pinned_id:
            try:
                await context.bot.unpin_chat_message(chat_id=BATH_CHAT_ID, message_id=old_pinned_id)
                db.delete_pinned_message_id(old_pinned_id)
                logger.info(f"[create_bath_event] Unpinned old message {old_pinned_id}")
            except Exception as e:
                logger.warning(f"[create_bath_event] Failed to unpin old message: {e}")
                
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            sent_message = await context.bot.send_message(
                chat_id=BATH_CHAT_ID,
                text=message_text,
                reply_markup=reply_markup
            )
            logger.info(f"[create_bath_event] Sent new message: {sent_message.message_id}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            pinned_messages = await context.bot.get_chat(BATH_CHAT_ID)
            if pinned_messages.pinned_message:
                current_message = pinned_messages.pinned_message.text
                current_markup = pinned_messages.pinned_message.reply_markup
                
                def markup_to_str(markup):
                    if not markup:
                        return ''
                    return str([[btn.text for btn in row] for row in markup.inline_keyboard])
                    
                markup_changed = markup_to_str(current_markup) != markup_to_str(reply_markup)
                
                if current_message != message_text or markup_changed:
                    try:
                        await context.bot.edit_message_text(
                            chat_id=BATH_CHAT_ID,
                            message_id=pinned_messages.pinned_message.message_id,
                            text=message_text,
                            reply_markup=reply_markup
                        )
                        logger.info(f"[create_bath_event] Updated pinned message")
                    except Exception as e:
                        logger.error(f"[create_bath_event] Error updating pinned message: {e}", exc_info=True)
                else:
                    logger.info(f"[create_bath_event] Message and buttons unchanged")
            else:
                try:
                    await context.bot.pin_chat_message(
                        chat_id=BATH_CHAT_ID,
                        message_id=sent_message.message_id,
                        disable_notification=False
                    )
                    db.set_pinned_message_id(next_sunday, sent_message.message_id)
                    logger.info(f"[create_bath_event] Pinned new message: {sent_message.message_id}")
                except Exception as e:
                    logger.error(f"[create_bath_event] Error pinning message: {e}", exc_info=True)
                    
            if cleared_events > 0:
                await context.bot.send_message(
                    chat_id=BATH_CHAT_ID,
                    text=f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é {next_sunday}. –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–∞–Ω–∏ –æ—á–∏—â–µ–Ω."
                )
                logger.info(f"[create_bath_event] Sent cleanup notification")
                
        except Exception as e:
            logger.error(f"[create_bath_event] Error sending/updating message: {e}", exc_info=True)
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –±–∞–Ω–∏.")
                
    except Exception as e:
        logger.error(f"[create_bath_event] Unexpected error: {e}", exc_info=True)
        try:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è –±–∞–Ω–∏.")
        except Exception as inner_e:
            logger.error(f"[create_bath_event] Error sending error message: {inner_e}", exc_info=True)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[button_callback] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        db.add_active_user(user.id, user.username or user.first_name)
        callback_data = query.data
        logger.debug(f"–ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {callback_data}")

        if callback_data.startswith("join_bath_"):
            logger.info("[button_callback] –í–µ—Ç–∫–∞ join_bath_")
            date_str = callback_data.replace("join_bath_", "")
            logger.info(f"[button_callback] join_bath_ –¥–ª—è –¥–∞—Ç—ã {date_str}")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é {date_str}")

            if not db.try_add_bath_invite(user.id, date_str, hours=2):
                await query.answer("–í–∞–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.", show_alert=True)
                return

            if 'bath_registrations' in context.user_data and date_str in context.user_data['bath_registrations']:
                await query.answer("–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É.", show_alert=True)
                return

            participants = db.get_bath_participants(date_str)
            if len(participants) >= MAX_BATH_PARTICIPANTS:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                await query.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–Ω—è —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!", show_alert=True)
                return

            try:
                bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
                bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
                bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
                bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"

                keyboard = [
                    [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await context.bot.send_message(
                    chat_id=user.id,
                    text=bath_info,
                    reply_markup=reply_markup
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")

                await query.message.reply_text(
                    f"@{user.username or user.first_name}, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞.",
                    reply_to_message_id=query.message.message_id
                )

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
                bot_username = context.bot.username
                start_link = f"https://t.me/{bot_username}?start=bath_{date_str}"
                # ... (–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ) ...
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ button_callback: {e}")

async def confirm_bath_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[confirm_bath_registration] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        db.add_active_user(user.id, user.username or user.first_name)
        callback_data = query.data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –Ω–∞ –±–∞–Ω—é: {callback_data}")

        if callback_data.startswith("confirm_bath_"):
            date_str = callback_data.replace("confirm_bath_", "")

            participants = db.get_bath_participants(date_str)
            if len(participants) >= MAX_BATH_PARTICIPANTS:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –Ω–µ —Å–º–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å - –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
                await query.edit_message_text(
                    text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–Ω—è —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
                )
                return

            if 'bath_registrations' not in context.user_data:
                context.user_data['bath_registrations'] = {}

            username = user.username or f"{user.first_name} {user.last_name or ''}"
            context.user_data['bath_registrations'][date_str] = {
                'user_id': user.id,
                'username': username,
                'status': 'pending_payment'
            }
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ {date_str}")

            payment_info = f"–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –±–∞–Ω—é ({date_str}), –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É:\n\n"
            payment_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST}\n\n"
            payment_info += f"–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:\n"
            payment_info += f"1. –ö–ê–†–¢–ê: {CARD_PAYMENT_LINK}\n"
            payment_info += f"2. Revolut: {REVOLUT_PAYMENT_LINK}\n\n"
            payment_info += f"–ü–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –Ω–∏–∂–µ."

            keyboard = [
                [
                    InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª(–∞) –æ–Ω–ª–∞–π–Ω", callback_data=f"paid_bath_{date_str}"),
                    InlineKeyboardButton("–ë—É–¥—É –ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–∏—á–Ω—ã–º–∏", callback_data=f"cash_bath_{date_str}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                text=payment_info,
                reply_markup=reply_markup
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ confirm_bath_registration: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_payment_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[handle_payment_confirmation] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        db.add_active_user(user.id, user.username or user.first_name)
        callback_data = query.data
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É: {callback_data}")

        if callback_data.startswith("paid_bath_"):
            date_str = callback_data.replace("paid_bath_", "")

            if ('bath_registrations' in context.user_data and
                    date_str in context.user_data['bath_registrations']):

                context.user_data['bath_registrations'][date_str]['status'] = 'payment_claimed'
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ {date_str}")

                username = user.username or f"{user.first_name} {user.last_name or ''}"

                user_data = {
                    'user_id': user.id,
                    'username': username,
                    'date_str': date_str
                }
                logger.info(f"–î–æ–±–∞–≤–ª—è—é –∑–∞—è–≤–∫—É: user_id={user.id}, username={username}, date_str={date_str}, payment_type=online")
                db.add_pending_payment(user.id, username, date_str, payment_type='online')
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

                await query.edit_message_text(
                    text=f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                         f"–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –≤—ã –±—É–¥–µ—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–∞–Ω–∏ –Ω–∞ {date_str}.\n"
                         f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                )

                for admin_id in ADMIN_IDS:
                    try:
                        callback_data_confirm = f"admin_confirm_{user.id}_{date_str}_online"
                        callback_data_decline = f"admin_decline_{user.id}_{date_str}_online"
                        logger.info(f"–§–æ—Ä–º–∏—Ä—É—é callback_data: confirm={callback_data_confirm}, decline={callback_data_decline}")
                        keyboard = [
                            [
                                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª –æ–Ω–ª–∞–π–Ω", callback_data=callback_data_confirm),
                                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=callback_data_decline)
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} (ID: {user.id}) —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –æ–ø–ª–∞—Ç–∏–ª –±–∞–Ω—é –Ω–∞ {date_str}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –æ–ø–ª–∞—Ç—É.",
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –æ–ø–ª–∞—Ç—É (online)")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                        continue
            else:
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                await query.edit_message_text(
                    text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–∏—Å–∏ –∑–∞–Ω–æ–≤–æ."
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_payment_confirmation: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def admin_confirm_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, date_str, payment_type):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[admin_confirm_payment] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        
        await query.answer()
        
        if user.id not in ADMIN_IDS:
            logger.warning(f"[admin_confirm_payment] Non-admin user {user.id} attempted to confirm payment")
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return
            
        callback_data = query.data
        parts = callback_data.split("_")
        
        if parts[0] == "admin" and parts[1] == "confirm":
            user_id = int(parts[2])
            date_str = parts[3]
            payment_type = parts[4] if len(parts) > 4 else None
            
            user_data = db.get_pending_payment(user_id, date_str, payment_type)
            logger.info(f"[admin_confirm_payment] Looking for payment: user_id={user_id}, date_str={date_str}, payment_type={payment_type}")
            logger.info(f"[admin_confirm_payment] Found payment data: {user_data}")
            
            if user_data:
                profile = db.get_user_profile(user_id)
                if not profile:
                    logger.warning(f"[admin_confirm_payment] No profile found for user {user_id}")
                    await query.edit_message_text(
                        text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å. –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, –∞ –∑–∞—Ç–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É."
                    )
                    return
                    
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É
                try:
                    db.confirm_payment(user_id, date_str, payment_type)
                    logger.info(f"[admin_confirm_payment] Payment confirmed for user {user_id}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –±–∞–Ω—é {date_str} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                        )
                        logger.info(f"[admin_confirm_payment] Sent confirmation to user {user_id}")
                    except Exception as e:
                        logger.error(f"[admin_confirm_payment] Error sending confirmation to user: {e}", exc_info=True)
                        
                    await query.edit_message_text(
                        text=f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."
                    )
                    
                except Exception as e:
                    logger.error(f"[admin_confirm_payment] Error confirming payment: {e}", exc_info=True)
                    await query.edit_message_text(
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã."
                    )
            else:
                logger.warning(f"[admin_confirm_payment] No payment found for user {user_id}")
                await query.edit_message_text(
                    text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                )
                
    except Exception as e:
        logger.error(f"[admin_confirm_payment] Unexpected error: {e}", exc_info=True)
        try:
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã."
            )
        except Exception as inner_e:
            logger.error(f"[admin_confirm_payment] Error sending error message: {inner_e}", exc_info=True)

async def admin_decline_payment(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id, date_str, payment_type):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[admin_decline_payment] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        
        await query.answer()
        
        if user.id not in ADMIN_IDS:
            logger.warning(f"[admin_decline_payment] Non-admin user {user.id} attempted to decline payment")
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return
            
        callback_data = query.data
        parts = callback_data.split("_")
        
        if parts[0] == "admin" and parts[1] == "decline":
            user_id = int(parts[2])
            date_str = parts[3]
            payment_type = parts[4] if len(parts) > 4 else None
            
            user_data = db.get_pending_payment(user_id, date_str, payment_type)
            logger.info(f"[admin_decline_payment] Looking for payment: user_id={user_id}, date_str={date_str}, payment_type={payment_type}")
            logger.info(f"[admin_decline_payment] Found payment data: {user_data}")
            
            if user_data:
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –æ–ø–ª–∞—Ç—É
                try:
                    db.decline_payment(user_id, date_str, payment_type)
                    logger.info(f"[admin_decline_payment] Payment declined for user {user_id}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"–í–∞—à–∞ –æ–ø–ª–∞—Ç–∞ –∑–∞ –±–∞–Ω—é {date_str} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        )
                        logger.info(f"[admin_decline_payment] Sent decline notification to user {user_id}")
                    except Exception as e:
                        logger.error(f"[admin_decline_payment] Error sending decline notification to user: {e}", exc_info=True)
                        
                    await query.edit_message_text(
                        text=f"–û–ø–ª–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_data['username']} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞."
                    )
                    
                except Exception as e:
                    logger.error(f"[admin_decline_payment] Error declining payment: {e}", exc_info=True)
                    await query.edit_message_text(
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã."
                    )
            else:
                logger.warning(f"[admin_decline_payment] No payment found for user {user_id}")
                await query.edit_message_text(
                    text="–ó–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                )
                
    except Exception as e:
        logger.error(f"[admin_decline_payment] Unexpected error: {e}", exc_info=True)
        try:
            await query.edit_message_text(
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã."
            )
        except Exception as inner_e:
            logger.error(f"[admin_decline_payment] Error sending error message: {inner_e}", exc_info=True)

async def handle_message_to_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != "private":
        return
    if update.callback_query:
        query = update.callback_query
        await query.answer()
    else:
        query = None

    admin_id = update.effective_user.id

    if context.user_data.get('messaging_user_id'):
        pass
    elif query and query.data.startswith("message_user_"):
        pass
    else:
        return

    if admin_id not in ADMIN_IDS:
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END

    if query:
        # ... (–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É callback message_user_) ...
        pass
    # ... (–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é) ... 

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if context.args and context.args[0].startswith("bath_"):
        # Deep link: –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é
        date_str = context.args[0].replace("bath_", "")
        bath_info = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –±–∞–Ω—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ {date_str}.\n\n"
        bath_info += f"–í—Ä–µ–º—è: {BATH_TIME} ‚ÄºÔ∏è\n\n"
        bath_info += f"C—Ç–æ–∏–º–æ—Å—Ç—å: {BATH_COST} –∫–∞—Ä—Ç–∞ –ª–∏–±–æ –Ω–∞–ª–∏—á–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µüìç\n\n"
        bath_info += f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_bath_{date_str}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            text=bath_info,
            reply_markup=reply_markup
        )
        return
    # –û–±—ã—á–Ω—ã–π /start
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}! üëã\n\n"
        "–Ø ‚Äî –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–Ω—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–µ—â–µ–Ω–∏—è–º–∏.\n\n"
        "–ß—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –±–∞–Ω—é\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ–ø–ª–∞—Ç\n"
        "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏–π\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∞–º ‚Äî —É–ø—Ä–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏, –æ—Ç–º–µ—á–∞—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ—Å–µ—â–µ–Ω–∏—è\n\n"
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /register, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è!"
    )
    await update.message.reply_text(text) 