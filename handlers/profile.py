import logging
import re
import csv
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import ADMIN_IDS
from database import Database

db = Database()
logger = logging.getLogger(__name__)

PROFILE, FULL_NAME, BIRTH_DATE, OCCUPATION, INSTAGRAM, SKILLS = range(6)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat = update.effective_chat
    if chat.type != "private":
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return ConversationHandler.END
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    profile = db.get_user_profile(user_id)
    message = update.message or (update.callback_query and update.callback_query.message)
    if profile:
        text = "üìã –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        text += f"üë§ –ò–º—è: {profile['full_name']}\n"
        text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {profile['birth_date']}\n"
        text += f"üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {profile['occupation']}\n"
        text += f"üì∏ Instagram: {profile['instagram']}\n"
        text += f"üéØ –ß–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω: {profile['skills']}\n"
        text += f"üèÜ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {profile['total_visits']}\n"
        if profile['first_visit_date']:
            text += f"üìÖ –ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {profile['first_visit_date']}\n"
        if profile['last_visit_date']:
            text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {profile['last_visit_date']}\n"
        text += "\n–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç)"
        if message:
            await message.reply_text(text)
        return PROFILE
    else:
        if message:
            await message.reply_text(
                "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.\n"
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)"
            )
        return FULL_NAME

async def handle_profile_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    message = update.message or (update.callback_query and update.callback_query.message)
    if query.data == "update_profile_yes":
        if message:
            await message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
            )
        return FULL_NAME
    else:
        if message:
            await message.reply_text("–•–æ—Ä–æ—à–æ, –ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
        return ConversationHandler.END

async def handle_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['full_name'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15 –º–∞—Ä—Ç–∞):"
        )
        return BIRTH_DATE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_full_name: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def handle_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_text = update.message.text.strip()
        if not re.match(r"^\d{1,2}\.\d{1,2}$", date_text):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15.03)"
            )
            return BIRTH_DATE
        context.user_data['birth_date'] = date_text
        await update.message.reply_text(
            "–ß–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å? (—Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏):"
        )
        return OCCUPATION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_birth_date: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def handle_occupation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['occupation'] = update.message.text
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à Instagram (–∏–ª–∏ '–Ω–µ—Ç', –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑—ã–≤–∞—Ç—å):"
        )
        return INSTAGRAM
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_occupation: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def handle_instagram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        context.user_data['instagram'] = update.message.text
        await update.message.reply_text(
            "–°—Ñ–µ—Ä–∞ –±–∏–∑–Ω–µ—Å–∞, –æ–±–ª–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã, —Ç–∏–ø —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –∏ —Ç.–¥."
        )
        return SKILLS
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_instagram: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return ConversationHandler.END

async def handle_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data['skills'] = update.message.text
    message = update.message or (update.callback_query and update.callback_query.message)
    success = db.save_user_profile(
        user_id=user.id,
        username=user.username or user.first_name,
        full_name=context.user_data['full_name'],
        birth_date=context.user_data['birth_date'],
        occupation=context.user_data['occupation'],
        instagram=context.user_data['instagram'],
        skills=context.user_data['skills']
    )
    if success:
        if message:
            await message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /profile"
            )
        user_pending = None
        for date_str in [p['date_str'] for p in db.get_all_user_profiles() if p['user_id'] == user.id]:
            pending = db.get_pending_payment(user.id, date_str)
            if pending:
                user_pending = pending
                break
        if user_pending:
            for admin_id in ADMIN_IDS:
                try:
                    keyboard = [
                        [
                            InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª –æ–Ω–ª–∞–π–Ω", callback_data=f"admin_confirm_{user.id}_{user_pending['date_str']}_online"),
                            InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{user.id}_{user_pending['date_str']}_online")
                        ]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    profile_info = (
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name} –∑–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                        f"üë§ –ò–º—è: {context.user_data['full_name']}\n"
                        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data['birth_date']}\n"
                        f"üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {context.user_data['occupation']}\n"
                        f"üì∏ Instagram: {context.user_data['instagram']}\n"
                        f"üéØ –°—Ñ–µ—Ä–∞ –±–∏–∑–Ω–µ—Å–∞, –æ–±–ª–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã, —Ç–∏–ø —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {context.user_data['skills']}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –±–∞–Ω–∏ –Ω–∞ {user_pending['date_str']}."
                    )
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=profile_info,
                        reply_markup=reply_markup
                    )
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    else:
        if message:
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    return ConversationHandler.END

async def start_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    logger.info(f"[start_profile_callback] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
    try:
        await query.answer()
        if update.effective_chat.type != "private":
            await query.edit_message_text("–ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            return
        await query.edit_message_text("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)")
        logger.info(f"–ù–∞—á–∞—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        return FULL_NAME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ start_profile_callback: {e}")
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except:
            pass
        return ConversationHandler.END

async def export_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[export_profiles] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /export_profiles")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[export_profiles] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[export_profiles] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        profiles = db.get_all_user_profiles()
        if not profiles:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
            return
        with tempfile.NamedTemporaryFile(mode='w+', newline='', delete=False, suffix='.csv') as tmpfile:
            fieldnames = [
                'user_id', 'username', 'full_name', 'birth_date', 'occupation',
                'instagram', 'skills', 'total_visits', 'first_visit_date', 'last_visit_date'
            ]
            writer = csv.DictWriter(tmpfile, fieldnames=fieldnames)
            writer.writeheader()
            for profile in profiles:
                writer.writerow({k: profile.get(k, '') for k in fieldnames})
            tmpfile_path = tmpfile.name
        with open(tmpfile_path, 'rb') as f:
            await context.bot.send_document(
                chat_id=user_id,
                document=f,
                filename='bath_users.csv',
                caption='–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
            )
        logger.info(f"[export_profiles] –§–∞–π–ª —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ export_profiles: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø—Ä–æ—Ñ–∏–ª–µ–π.")
