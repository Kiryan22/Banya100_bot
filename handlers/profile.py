import logging
import re
import csv
import tempfile
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import ADMIN_IDS
from database import Database

db = Database()
logger = logging.getLogger(__name__)

PROFILE, FULL_NAME, BIRTH_DATE, OCCUPATION, INSTAGRAM, SKILLS = range(6)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat = update.effective_chat
    if chat.type != "private":
        message = update.message or (update.callback_query and update.callback_query.message)
        if message:
            await message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
        return ConversationHandler.END
    user_id = update.effective_user.id
    username = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
    profile = db.get_user_profile(user_id)
    message = update.message or (update.callback_query and update.callback_query.message)
    if profile:
        text = "üìã –í–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        text += f"üë§ –ò–º—è: {profile['full_name']}\n"
        text += f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {profile['birth_date']}\n"
        text += f"üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {profile['occupation']}\n"
        text += f"üì∏ Instagram: {profile['instagram']}\n"
        text += f"üéØ –ß–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω: {profile['skills']}\n"
        text += f"üèÜ –í—Å–µ–≥–æ –ø–æ—Å–µ—â–µ–Ω–∏–π: {profile['total_visits']}\n"
        if profile['first_visit_date']:
            text += f"üìÖ –ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {profile['first_visit_date']}\n"
        if profile['last_visit_date']:
            text += f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {profile['last_visit_date']}\n"
        text += "\n–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é? (–¥–∞/–Ω–µ—Ç)"
        if message:
            await message.reply_text(text)
        return PROFILE
    else:
        if message:
            await message.reply_text(
                "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.\n"
                "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)"
            )
        return FULL_NAME

async def handle_profile_update(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[handle_profile_update] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        
        await query.answer()
        
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning(f"[handle_profile_update] Command used in non-private chat by user {user.id}")
            return
            
        message = update.message or (update.callback_query and update.callback_query.message)
        
        if query.data == "update_profile_yes":
            if message:
                await message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:"
                )
                logger.info(f"[handle_profile_update] Started profile update for user {user.id}")
                context.user_data['updating_profile'] = True
                context.user_data['profile_step'] = 'full_name'
        elif query.data == "update_profile_no":
            if message:
                await message.reply_text(
                    "–•–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∑–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile"
                )
                logger.info(f"[handle_profile_update] User {user.id} declined profile update")
                
    except Exception as e:
        logger.error(f"[handle_profile_update] Unexpected error: {e}", exc_info=True)
        try:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        except Exception as inner_e:
            logger.error(f"[handle_profile_update] Error sending error message: {inner_e}", exc_info=True)

async def handle_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            logger.warning("[handle_full_name] No message or text received")
            return
            
        user = update.effective_user
        full_name = update.message.text.strip()
        logger.info(f"[handle_full_name] Received full name for user {user.id}: {full_name}")
        
        if not context.user_data.get('updating_profile'):
            logger.warning(f"[handle_full_name] User {user.id} not in profile update mode")
            return
            
        context.user_data['full_name'] = full_name
        context.user_data['profile_step'] = 'birth_date'
        logger.info(f"[handle_full_name] Saved full name for user {user.id}")
        
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú:"
        )
        
    except Exception as e:
        logger.error(f"[handle_full_name] Unexpected error: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as inner_e:
            logger.error(f"[handle_full_name] Error sending error message: {inner_e}", exc_info=True)

async def handle_birth_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            logger.warning("[handle_birth_date] No message or text received")
            return
            
        user = update.effective_user
        birth_date = update.message.text.strip()
        logger.info(f"[handle_birth_date] Received birth date for user {user.id}: {birth_date}")
        
        if not context.user_data.get('updating_profile'):
            logger.warning(f"[handle_birth_date] User {user.id} not in profile update mode")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        if not re.match(r"^\d{1,2}\.\d{1,2}$", birth_date):
            logger.warning(f"[handle_birth_date] Invalid date format from user {user.id}: {birth_date}")
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.01):"
            )
            return
            
        context.user_data['birth_date'] = birth_date
        context.user_data['profile_step'] = 'occupation'
        logger.info(f"[handle_birth_date] Saved birth date for user {user.id}")
        
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é:"
        )
        
    except Exception as e:
        logger.error(f"[handle_birth_date] Unexpected error: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as inner_e:
            logger.error(f"[handle_birth_date] Error sending error message: {inner_e}", exc_info=True)

async def handle_occupation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            logger.warning("[handle_occupation] No message or text received")
            return
            
        user = update.effective_user
        occupation = update.message.text.strip()
        logger.info(f"[handle_occupation] Received occupation for user {user.id}: {occupation}")
        
        if not context.user_data.get('updating_profile'):
            logger.warning(f"[handle_occupation] User {user.id} not in profile update mode")
            return
            
        context.user_data['occupation'] = occupation
        context.user_data['profile_step'] = 'instagram'
        logger.info(f"[handle_occupation] Saved occupation for user {user.id}")
        
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Instagram (–±–µ–∑ @):"
        )
        
    except Exception as e:
        logger.error(f"[handle_occupation] Unexpected error: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as inner_e:
            logger.error(f"[handle_occupation] Error sending error message: {inner_e}", exc_info=True)

async def handle_instagram(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if not update.message or not update.message.text:
            logger.warning("[handle_instagram] No message or text received")
            return
            
        user = update.effective_user
        instagram = update.message.text.strip()
        logger.info(f"[handle_instagram] Received Instagram for user {user.id}: {instagram}")
        
        if not context.user_data.get('updating_profile'):
            logger.warning(f"[handle_instagram] User {user.id} not in profile update mode")
            return
            
        context.user_data['instagram'] = instagram
        context.user_data['profile_step'] = 'skills'
        logger.info(f"[handle_instagram] Saved Instagram for user {user.id}")
        
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–∞—Ö –∏ —É–≤–ª–µ—á–µ–Ω–∏—è—Ö:"
        )
        
    except Exception as e:
        logger.error(f"[handle_instagram] Unexpected error: {e}", exc_info=True)
        try:
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ Instagram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        except Exception as inner_e:
            logger.error(f"[handle_instagram] Error sending error message: {inner_e}", exc_info=True)

async def handle_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    context.user_data['skills'] = update.message.text
    message = update.message or (update.callback_query and update.callback_query.message)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    success = db.save_user_profile(
        user_id=user.id,
        username=user.username or user.first_name,
        full_name=context.user_data['full_name'],
        birth_date=context.user_data['birth_date'],
        occupation=context.user_data['occupation'],
        instagram=context.user_data['instagram'],
        skills=context.user_data['skills']
    )
    
    if success:
        if message:
            await message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /profile"
            )
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pending_payments = db.get_pending_payments(user.id)
        if pending_payments:
            for payment in pending_payments:
                for admin_id in ADMIN_IDS:
                    try:
                        keyboard = [
                            [
                                InlineKeyboardButton("–û–ø–ª–∞—Ç–∏–ª –æ–Ω–ª–∞–π–Ω", callback_data=f"admin_confirm_{user.id}_{payment['date_str']}_online"),
                                InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"admin_decline_{user.id}_{payment['date_str']}_online")
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        profile_info = (
                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username or user.first_name} –∑–∞–ø–æ–ª–Ω–∏–ª –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
                            f"üë§ –ò–º—è: {context.user_data['full_name']}\n"
                            f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data['birth_date']}\n"
                            f"üíº –†–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {context.user_data['occupation']}\n"
                            f"üì∏ Instagram: {context.user_data['instagram']}\n"
                            f"üéØ –°—Ñ–µ—Ä–∞ –±–∏–∑–Ω–µ—Å–∞, –æ–±–ª–∞—Å—Ç—å —Ä–∞–±–æ—Ç—ã, —Ç–∏–ø —É—Å–ª—É–≥ –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {context.user_data['skills']}\n\n"
                            f"–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –±–∞–Ω–∏ –Ω–∞ {payment['date_str']}."
                        )
                        await context.bot.send_message(
                            chat_id=admin_id,
                            text=profile_info,
                            reply_markup=reply_markup
                        )
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id} –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    else:
        if message:
            await message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    return ConversationHandler.END

async def start_profile_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user = query.from_user
        logger.info(f"[start_profile_callback] CallbackQuery received: data={query.data}, chat_type={update.effective_chat.type}, user_id={user.id}")
        
        await query.answer()
        
        if update.effective_chat.type != "private":
            logger.warning(f"[start_profile_callback] User {user.id} tried to start profile in non-private chat")
            await query.edit_message_text("–ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            return
            
        await query.edit_message_text("–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å.\n–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–ò–º—è –∏ –§–∞–º–∏–ª–∏—è)")
        logger.info(f"[start_profile_callback] Started profile creation for user {user.id}")
        return FULL_NAME
        
    except Exception as e:
        logger.error(f"[start_profile_callback] Unexpected error: {e}", exc_info=True)
        try:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as inner_e:
            logger.error(f"[start_profile_callback] Error sending error message: {inner_e}", exc_info=True)
        return ConversationHandler.END

async def export_profiles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("[export_profiles] –í—Ö–æ–¥ –≤ –∫–æ–º–∞–Ω–¥—É /export_profiles")
    try:
        if update.effective_chat.type != "private":
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
            logger.warning("[export_profiles] –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ")
            return
        user_id = update.effective_user.id
        if user_id not in ADMIN_IDS:
            message = update.message or (update.callback_query and update.callback_query.message)
            if message:
                await message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            logger.warning(f"[export_profiles] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∞–¥–º–∏–Ω")
            return
        profiles = db.get_all_user_profiles()
        if not profiles:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö.")
            return
        with tempfile.NamedTemporaryFile(mode='w+', newline='', delete=False, suffix='.csv') as tmpfile:
            fieldnames = [
                'user_id', 'username', 'full_name', 'birth_date', 'occupation',
                'instagram', 'skills', 'total_visits', 'first_visit_date', 'last_visit_date'
            ]
            writer = csv.DictWriter(tmpfile, fieldnames=fieldnames)
            writer.writeheader()
            for profile in profiles:
                writer.writerow({k: profile.get(k, '') for k in fieldnames})
            tmpfile_path = tmpfile.name
        with open(tmpfile_path, 'rb') as f:
            await context.bot.send_document(
                chat_id=user_id,
                document=f,
                filename='bath_users.csv',
                caption='–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
            )
        logger.info(f"[export_profiles] –§–∞–π–ª —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ export_profiles: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø—Ä–æ—Ñ–∏–ª–µ–π.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    message = update.message or (update.callback_query and update.callback_query.message)
    if message:
        await message.reply_text('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.')
    return ConversationHandler.END

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    try:
        history = db.get_user_bath_history(user.id)
        if not history:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏—è –±–∞–Ω–∏.")
            return
        text = "–í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏—è –±–∞–Ω–∏:\n\n"
        for entry in history:
            date = entry['date']
            paid = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if entry['paid'] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
            visited = "üõÅ –ë—ã–ª" if entry.get('visited') else "‚Äî"
            text += f"{date}: {paid} {visited}\n"
        await update.message.reply_text(text)
    except Exception as e:
        logger.error(f"[history] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_profile_update_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        text = update.message.text.strip().lower()
        message = update.message
        if text in ["–¥–∞", "yes", "y", "–¥"]:
            context.user_data['updating_profile'] = True
            context.user_data['profile_step'] = 'full_name'
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:")
            logger.info(f"[handle_profile_update_text] Started profile update for user {user.id}")
            return FULL_NAME
        elif text in ["–Ω–µ—Ç", "no", "n", "–Ω"]:
            await message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–∑–∂–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /profile")
            logger.info(f"[handle_profile_update_text] User {user.id} declined profile update")
            return ConversationHandler.END
        else:
            await message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
            return PROFILE
    except Exception as e:
        logger.error(f"[handle_profile_update_text] Unexpected error: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
